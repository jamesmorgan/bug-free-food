'use strict';

(function () {

    var requires = [
        // 3rd Party
        'ngRoute',
        'firebase',
        'ui.bootstrap',
        // 3rd party wrappers
        'app.libs.firebase.utils',
        // Internals
        'app.controllers',
        'app.services',
        'app.filters',
        'app.directives',
        'app.models',
        'app.routes',
        'app.interceptors',
        'app.notify'
    ];

    angular.module('app', requires);

})();
'use strict';

(function () {

    angular.module('app.controllers', [
        'app.controllers.home',
        'app.controllers.menus',
        'app.controllers.orders',
        'app.controllers.restaurant',
        'app.controllers.order-wizard',
        'app.controllers.navigation'
    ]);

})();
'use strict';

(function () {

    angular.module('app.directives', []);

})();
'use strict';

(function () {

    angular.module('app.filters', []);

})();
'use strict';

(function () {
    angular.module('app.libs.firebase.utils', []);
})();
'use strict';

(function () {

    angular.module('app.interceptors', []);

})();
'use strict';

(function () {
    angular.module('app.models', []);

})();
'use strict';

(function () {

    angular.module('app.notify', ['cgNotify']);

    angular.module('app.notify').run(["notify", function (notify) {
        notify.config({
            duration: 2000,
            templateUrl: '/www-build/views/templates/angular-notify.html'
        });
    }]);

})();
'use strict';

(function () {
    angular.module('app.services', []);
})();
'use strict';

(function () {

    angular.module('app.controllers.home', []);

})();
'use strict';

(function () {

    angular.module('app.controllers.menus', []);

})();
'use strict';

(function () {

    angular.module('app.controllers.navigation', []);

})();
'use strict';

(function () {

    angular.module('app.controllers.orders', []);

})();
'use strict';

(function () {

    angular.module('app.controllers.restaurant', []);

})();
'use strict';

(function () {

    angular.module('app.controllers.order-wizard', []);

})();
'use strict';

(function () {

    /**
     * Basic app version constant
     */
    angular
        .module('app')

        // App version
        .constant('version', '0.0.1')

        // your Firebase data URL goes here, no trailing slash
        .constant('FBURL', 'https://bug-free-food.firebaseio.com');

})();
'use strict';
(function () {

    /**
     * @ngInject
     */
    var Routes = ["$routeProvider", "$locationProvider", function ($routeProvider, $locationProvider) {

        $routeProvider.when('/', {
            templateUrl: '/www-build/views/partials/home/index.html',
            controller: 'HomeCtrl as hc'
        });

        /**
         * Orders Management
         */
        $routeProvider.when('/orders/list', {
            templateUrl: '/www-build/views/partials/orders/orders.html',
            controller: 'OrdersCtrl as vm'
        });

        /**
         * Order Wizard
         */
        $routeProvider.when('/order-wizard/my-order', {
            templateUrl: '/www-build/views/partials/order-wizard/my-order.html',
            controller: 'WizardCtrl as vm'
        });
        $routeProvider.when('/order-wizard/place-order/:orderId', {
            templateUrl: '/www-build/views/partials/order-wizard/place-order.html',
            controller: 'PlaceOrderCtrl as vm'
        });

        /**
         * Menus Management
         */
//        $routeProvider.when('/menus/list', {
//            templateUrl: '/www-build/views/partials/menus/menus.html',
//            controller: 'ListMenusCtrl as lmc'
//        });
//        $routeProvider.when('/menus/create', {
//            templateUrl: '/www-build/views/partials/menus/create.html',
//            controller: 'CreateMenuCtrl as cmc'
//        });

        /**
         * Restaurant Management
         */
//        $routeProvider.when('/restaurants/list', {
//            templateUrl: '/www-build/views/partials/restaurant/restaurant.html',
//            controller: 'ListRestaurantCtrl as lrc'
//        });
//        $routeProvider.when('/restaurants/create', {
//            templateUrl: '/www-build/views/partials/restaurant/create.html',
//            controller: 'CreateRestaurantCtrl as crc'
//        });

        /**
         * Fallback
         */
        $routeProvider.otherwise({
            redirectTo: '/'
        });

        // Disable html 5 mode due to IE9 compatibility requirement!
        $locationProvider.html5Mode(false);

    }];
    Routes.$inject = ["$routeProvider", "$locationProvider"];

    angular
        .module('app.routes', [])
        .config(Routes);


})();
'use strict';

(function () {

    /**
     * @ngInject
     */
    function AppCtrl($log, $rootScope, NotifyService) {

        // ViewModel
        var vm = this;

        $rootScope.$on("$routeChangeError", function (event, current, previous, rejection) {
            var message = 'Failed to change route [' + (rejection.data.error ? rejection.data.error : rejection.data) + ']';
            $log.error(message);
            NotifyService.danger(message);
        });

    }
    AppCtrl.$inject = ["$log", "$rootScope", "NotifyService"];

    angular
        .module('app.controllers')
        .controller('AppCtrl', AppCtrl);

})();

// a simple wrapper on Firebase and AngularFire to simplify deps and keep things DRY
angular.module('app.libs.firebase.utils', ['firebase'])
   .factory('fbutil', ['$window', 'FBURL', '$firebase', function($window, FBURL, $firebase) {
      "use strict";

      return {
        syncObject: function(path, factoryConfig) {
          return syncData.apply(null, arguments).$asObject();
        },

        syncArray: function(path, factoryConfig) {
          return syncData.apply(null, arguments).$asArray();
        },

        ref: firebaseRef
      };

      function pathRef(args) {
        for (var i = 0; i < args.length; i++) {
          if (angular.isArray(args[i])) {
            args[i] = pathRef(args[i]);
          }
          else if( typeof args[i] !== 'string' ) {
            throw new Error('Argument '+i+' to firebaseRef is not a string: '+args[i]);
          }
        }
        return args.join('/');
      }

      /**
       * Example:
       * <code>
       *    function(firebaseRef) {
         *       var ref = firebaseRef('path/to/data');
         *    }
       * </code>
       *
       * @function
       * @name firebaseRef
       * @param {String|Array...} path relative path to the root folder in Firebase instance
       * @return a Firebase instance
       */
      function firebaseRef(path) {
        var ref = new $window.Firebase(FBURL);
        var args = Array.prototype.slice.call(arguments);
        if( args.length ) {
          ref = ref.child(pathRef(args));
        }
        return ref;
      }

      /**
       * Create a $firebase reference with just a relative path. For example:
       *
       * <code>
       * function(syncData) {
         *    // a regular $firebase ref
         *    $scope.widget = syncData('widgets/alpha');
         *
         *    // or automatic 3-way binding
         *    syncData('widgets/alpha').$bind($scope, 'widget');
         * }
       * </code>
       *
       * Props is the second param passed into $firebase. It can also contain limit, startAt, endAt,
       * and they will be applied to the ref before passing into $firebase
       *
       * @function
       * @name syncData
       * @param {String|Array...} path relative path to the root folder in Firebase instance
       * @param {object} [props]
       * @return a Firebase instance
       */
      function syncData(path, props) {
        var ref = firebaseRef(path);
        props = angular.extend({}, props);
        angular.forEach(['limit', 'startAt', 'endAt'], function(k) {
          if( props.hasOwnProperty(k) ) {
            var v = props[k];
            ref = ref[k].apply(ref, angular.isArray(v)? v : [v]);
            delete props[k];
          }
        });
        return $firebase(ref, props);
      }
   }]);


'use strict';

(function () {

    /**
     * @ngInject
     */
    angular.module('app.interceptors').factory('loggingInterceptor', ["$q", "$log", function ($q, $log) {

        function isPartial(url) {
            return url.indexOf('partials') === -1;
        }

        return {
            'request': function (config) {
                if (isPartial(config.url)) {
                    $log.debug('Http Request [' + config.method + '][' + config.url + ']');
                }
                return config;
            },

            'requestError': function (config) {
                $log.error('Http Request Error [' + config.method + '][' + config.url + ']');
                return config;
            },

            'response': function (response) {
                if (isPartial(response.config.url)) {
                    $log.debug('Http Response Success: Status [' + response.status + '] to [' + response.config.method + '][' + response.config.url + ']');
                }
                return response;
            },

            'responseError': function (rejection) {
                $log.error('Http Response Error: Status [' + rejection.status + '] to [' + rejection.config.method + '][' + rejection.config.url + '] data [' + (rejection.data.error ? rejection.data.error : rejection.data) + ']');
                return $q.reject(rejection);
            }
        };
    }]);

    angular.module('app.interceptors').config(['$httpProvider', function ($httpProvider) {
        $httpProvider.interceptors.push('loggingInterceptor');
    }]);

})();
'use strict';

(function () {
    /**
     * @ngInject
     */
    var UserModel = function () {

        return {
            /**
             * The user
             */
            user: null
        };
    };

    angular.module('app.models').factory('UserModel', UserModel);
})();
'use strict';

(function () {

    /**
     * @ngInject
     */
    var NotifyService = ["notify", function (notify) {

        /**
         * Show a notification with style DANGER
         *
         * @param message the message to display
         */
        this.danger = function (message) {
            notify({message: message, classes: 'alert-danger'});
        };

        /**
         * Show a notification with style WARNING
         *
         * @param message the message to display
         */
        this.warning = function (message) {
            notify({message: message, classes: 'alert-warning'});
        };

        /**
         * Show a notification with style SUCCESS
         *
         * @param message the message to display
         */
        this.success = function (message) {
            notify({message: message, classes: 'alert-success'});
        };

        /**
         * Show a notification with style INFO
         *
         * @param message the message to display
         */
        this.info = function (message) {
            notify({message: message, classes: 'alert-info'});
        };
    }];
    NotifyService.$inject = ["notify"];

    angular
        .module('app.notify')
        .service('NotifyService', NotifyService);

})();
'use strict';

(function () {

    /**
     * @ngInject
     */
    var DateService = function () {

        /**
         * The Date NOW
         *
         * @returns Date
         */
        this.now = function () {
            return new Date();
        };

        /**
         * The Date NOW in seconds
         *
         * @returns number
         */
        this.getTime = function () {
            return this.now().getTime();
        };
    };

    angular
        .module('app.services')
        .service('DateService', DateService);

})();
'use strict';

(function () {

    /**
     * @ngInject
     */
    function HomeCtrl($log, NotifyService, Firebase, $firebase) {

        // ViewModel
        var vm = this;

        var ref = new Firebase("https://bug-free-food.firebaseio.com/");
        // create an AngularFire reference to the data
        var sync = $firebase(ref);
        // download the data into a local object
        vm.data = sync.$asObject();

    }
    HomeCtrl.$inject = ["$log", "NotifyService", "Firebase", "$firebase"];

    angular
        .module('app.controllers.home')
        .controller('HomeCtrl', HomeCtrl);

})();
'use strict';

(function () {

    /**
     * @ngInject
     */
    function CreateMenuCtrl($log, NotifyService, Firebase, $firebase) {

        // ViewModel
        var vm = this;

        // restaurantsRef
        var restaurantsRef = new Firebase("https://bug-free-food.firebaseio.com/restaurants");
        var restaurantsSync = $firebase(restaurantsRef);

        vm.restaurants = restaurantsSync.$asArray();
        console.log(vm.restaurants);

        // menuRef
        var menuRef = new Firebase("https://bug-free-food.firebaseio.com/menus");
        var menuSync = $firebase(menuRef);

        vm.menus = menuSync.$asArray();
        console.log(vm.menus);

        vm.selectedRestaurant = {};
        vm.newMenu = {
            name: '',
            foods: [
                {
                    name: '', price: 0
                }
            ],
            createdDate: Date.now()
        };

        this.createMenu = function () {
            console.log('Adding new menu [%s]', angular.toJson(vm.newMenu));
            console.log(vm.selectedRestaurant);

            if (!vm.selectedRestaurant.menus) {
                vm.selectedRestaurant.menus = [];
            }
            vm.selectedRestaurant.menus.push(vm.newMenu);

            vm.restaurants.$save(vm.selectedRestaurant);
            console.log(vm.restaurants);

            vm.newMenu = {
                name: '',
                foods: [
                    {
                        name: '', price: 0
                    }
                ],
                createdDate: Date.now()
            };
        };

        this.removeFood = function (food, index) {
            vm.newMenu.foods.splice(index, 1);
        };

        this.addFood = function () {
            vm.newMenu.foods.push({
                name: '', price: 0
            });
        };

//        Small Chicken Naan	£3.80
//        Small Chicken Chapatti	£3.80
//        Chicken Lamb Mix Naan	£6.00
//        Chicken Lamb Mix Chapatti	£6.00
//        Large Chicken Naan	£6.00
//        Large Chicken Chapatti	£6.00
//        Large Lamb Naan	£6.00
//        Large Lamb Chapatti	£6.00
//        Chicken Seekh Mix Naan	£6.00
//        Chicken Seekh Mix Chapatti	£6.00
//        Small Seekh Naan	£2.90
//        Small Seekh Chapatti	£2.90
//        Large Seekh Naan	£3.70
//        Large Seekh Chapatti	£3.70
//        Small Chips	£1.30
//        Large Chips	£2.00
//        Chicken Donner	£3.50


    }
    CreateMenuCtrl.$inject = ["$log", "NotifyService", "Firebase", "$firebase"];

    angular
        .module('app.controllers.menus')
        .controller('CreateMenuCtrl', CreateMenuCtrl);

})();
'use strict';

(function () {

    /**
     * @ngInject
     */
    function ListMenusCtrl($log, NotifyService, Firebase, $firebase) {

        // ViewModel
        var vm = this;

        var ref = new Firebase("https://bug-free-food.firebaseio.com/restaurants");
        var sync = $firebase(ref);

        vm.restaurants = sync.$asArray();

        console.log(vm.restaurants);

        this.removeMenuAtIndex = function (resturant, index) {
            resturant.menus.splice(index, 1);
            vm.restaurants.$save(resturant);
        };
    }
    ListMenusCtrl.$inject = ["$log", "NotifyService", "Firebase", "$firebase"];

    angular
        .module('app.controllers.menus')
        .controller('ListMenusCtrl', ListMenusCtrl);

})();
'use strict';

(function () {

    /**
     * @ngInject
     */
    function TopNavCtrl($log, NotifyService, $firebaseSimpleLogin, Firebase, UserModel) {

        // ViewModel
        var vm = this;

        var ref = new Firebase("https://bug-free-food.firebaseio.com");

        vm.userModel = UserModel;

        var authClient = $firebaseSimpleLogin(ref);
        console.log(authClient);

        // TODO move to resolve!
        this.init = function () {
            authClient.$getCurrentUser().then(handleSuccessfulLogin);
        };

        this.login = function () {
            $log.debug('Login - github');
            authClient.$login('github', { rememberMe: true, scope: 'user'})
                .then(handleSuccessfulLogin, popError);
        };

        this.logout = function () {
            $log.debug('Logout');
            console.log(authClient);
            authClient.$logout();
            UserModel.user = null;
            NotifyService.success('user is logged out');
        };

        function handleSuccessfulLogin(user) {
            if (user) {
                UserModel.user = user;
                $log.debug("User ID: " + user.uid + ", Provider: " + user.provider);
                NotifyService.success("User ID: " + user.uid + ", Provider: " + user.provider);
            }
        }

        function popError(error) {
            $log.error(error);
            NotifyService.danger(error);
        }
    }
    TopNavCtrl.$inject = ["$log", "NotifyService", "$firebaseSimpleLogin", "Firebase", "UserModel"];

    angular
        .module('app.controllers.navigation')
        .controller('TopNavCtrl', TopNavCtrl);

})();
'use strict';

(function () {

    /**
     * @ngInject
     */
    function OrdersCtrl($log, fbutil, NotifyService, UserModel) {

        // ViewModel
        var vm = this;

        vm.orders = fbutil.syncArray('orders');

        vm.userModel = UserModel;

        resetForm();

        // Users
        vm.availableUsers = ['James Morgan', 'Andy Gray', 'Simon Souter', 'Alex Lashford'];

        // Available page configuration
        vm.availableRestaurants = [
            {
                name: 'Abduls Levenshulme',
                openingTimes: '...',
                foods: [
                    {name: 'Small Chicken Naan', price: 380},
                    {name: 'Small Chicken Chapatti', price: 300},
                    {name: 'Chicken Lamb Mix Naan', price: 600},
                    {name: 'Chicken Lamb Mix Chapatti', price: 600},
                    {name: 'Large Chicken Naan', price: 600},
                    {name: 'Large Chicken Chapatti', price: 600},
                    {name: 'Large Lamb Naan', price: 600},
                    {name: 'Large Lamb Chapatti', price: 600},
                    {name: 'Chicken Seekh Mix Naan', price: 600},
                    {name: 'Small Seekh Naan', price: 290},
                    {name: 'Small Seekh Chapatti', price: 290},
                    {name: 'Large Seekh Naan', price: 370},
                    {name: 'Large Seekh Chapatti', price: 370},
                    {name: 'Small Chips', price: 130},
                    {name: 'Large Chips', price: 200},
                    {name: 'Chicken Donner', price: 350}
                ]
            }
        ];

        this.createOrder = function () {

            // Set the user
            vm.newOrder.createdBy = UserModel.user;

            vm.orders.$add(angular.copy(vm.newOrder))
                .then(function () {
                    NotifyService.success('Successfully added order');
                }, function () {
                    NotifyService.danger('Unable to save order');
                });
            resetForm();
        };

        this.removeOrder = function (order) {
            vm.orders.$remove(order)
                .then(function () {
                    NotifyService.success('Successfully removed order');
                }, function () {
                    NotifyService.danger('Unable to remove order');
                });
        };

        function resetForm() {
            vm.newOrder = {
                createdBy: UserModel.user,
                name: '',
                restaurant: '',
                content: [
                    {}
                ],
                createdDate: Date.now()
            };
        }
    }
    OrdersCtrl.$inject = ["$log", "fbutil", "NotifyService", "UserModel"];

    angular
        .module('app.controllers.orders')
        .controller('OrdersCtrl', OrdersCtrl);

})();
'use strict';

(function () {

    /**
     * @ngInject
     */
    function CreateRestaurantCtrl($log, NotifyService, Firebase, $firebase) {

        // ViewModel
        var vm = this;

        var ref = new Firebase("https://bug-free-food.firebaseio.com/restaurants");
        var sync = $firebase(ref);

        vm.resturants = sync.$asArray();
        console.log(vm.resturants);

        vm.newRestaurant = {
            name: '',
            createdDate: Date.now(),
            menus: []
        };

        this.addRestaurant = function () {
            $log.debug('Adding new restaurants [%s]', vm.newRestaurant);

            vm.resturants.$add(angular.copy(vm.newRestaurant));

            vm.newRestaurant = {
                name: '',
                createdDate: Date.now(),
                menus: []
            };
        };
    }
    CreateRestaurantCtrl.$inject = ["$log", "NotifyService", "Firebase", "$firebase"];

    angular
        .module('app.controllers.restaurant')
        .controller('CreateRestaurantCtrl', CreateRestaurantCtrl);

})();
'use strict';

(function () {

    /**
     * @ngInject
     */
    function ListRestaurantCtrl($log, NotifyService, Firebase, $firebase) {

        // ViewModel
        var vm = this;

        var ref = new Firebase("https://bug-free-food.firebaseio.com/restaurants");
        var sync = $firebase(ref);

        vm.restaurants = sync.$asArray();

    }
    ListRestaurantCtrl.$inject = ["$log", "NotifyService", "Firebase", "$firebase"];

    angular
        .module('app.controllers.restaurant')
        .controller('ListRestaurantCtrl', ListRestaurantCtrl);

})();
'use strict';

(function () {

    /**
     * @ngInject
     */
    function PlaceOrderCtrl($log, NotifyService, $routeParams, fbutil, UserModel) {

        var self = this;

        // ViewModel
        var vm = this;

        vm.userModel = UserModel;

        vm.selectedOrder = fbutil.syncObject(['orders/', $routeParams.orderId]);

        vm.selectedOrder.$loaded()
            .then(function () {
                vm.updatePageTotals();
            });

        vm.totalCounts = {};

        this.getOrderTotals = function () {
            if (!vm.selectedOrder || !vm.selectedOrder.details || vm.selectedOrder.details.length <= 0) {
                return 0;
            }
            var total = 0;
            vm.selectedOrder.details.forEach(function (detail) {
                if (detail.order) {
                    detail.order.forEach(function (order) {
                        total += order.price;
                    });
                }
            });
            return (total / 100).toFixed(2);
        };

        this.updatePageTotals = function () {
            if (!vm.selectedOrder || !vm.selectedOrder.details || vm.selectedOrder.details.length <= 0) {
                return;
            }

            vm.totalCounts = {};
            vm.selectedOrder.details.forEach(function (detail) {
                if (detail.order) {
                    detail.order.forEach(function (order) {
                        if (!vm.totalCounts[order.name]) {
                            vm.totalCounts[order.name] = {
                                name: order.name,
                                price: order.price,
                                count: 1
                            };
                        } else {
                            vm.totalCounts[order.name].count++;
                        }
                    });
                }
            });
        };

        vm.updatePageTotals();
    }
    PlaceOrderCtrl.$inject = ["$log", "NotifyService", "$routeParams", "fbutil", "UserModel"];

    angular
        .module('app.controllers.order-wizard')
        .controller('PlaceOrderCtrl', PlaceOrderCtrl);

})();
'use strict';

(function () {

    /**
     * @ngInject
     */
    function WizardCtrl($log, NotifyService, fbutil, UserModel) {

        var self = this;

        // ViewModel
        var vm = this;

        vm.userModel = UserModel;

        vm.orders = fbutil.syncArray('orders');

        vm.selectedOrder = undefined;

        vm.newOrderItemForm = undefined;

        // The data form
        vm.myOrder = {
            foods: []
        };

        this.initOrderForUser = function () {
            var orderDetail = {
                user: UserModel.user,
                order: []
            };

            if (hasOrderWithDetails()) {
                vm.selectedOrder.details.push(orderDetail);
            } else {
                vm.selectedOrder.details = [orderDetail]
            }
        };

        this.userHasOrder = function () {
            if (!hasOrderWithDetails() || !UserModel.user) {
                return false;
            }

            return vm.selectedOrder.details.some(function (detail) {
                return detail.user.id === UserModel.user.id
            })
        };

        this.findUserOrder = function () {
            var userDetails = vm.selectedOrder.details.filter(function (detail) {
                return detail.user.id === UserModel.user.id
            });

            if (userDetails.length === 0) {
                throw new Error('User not found in order!');
            }
            return userDetails[0];
        };

        this.addFoodItem = function () {
            var userOrder = this.findUserOrder();

            if (!userOrder.order) {
                userOrder.order = [];
            }
            userOrder.order.push(vm.newOrderItemForm);
            vm.orders.$save(vm.selectedOrder)
                .then(function () {
                    NotifyService.success('Added ' + userOrder.order[userOrder.order.length - 1].name + ' to the order!');
                    vm.newOrderItemForm = undefined;
                    self.updatePageTotals();
                });
        };

        this.removeFoodItem = function (index, item) {
            this.findUserOrder().order.splice(index, 1);
            vm.orders.$save(vm.selectedOrder)
                .then(function () {
                    NotifyService.success('Removed ' + item.name + ' from the order!');
                    self.updatePageTotals();
                });
        };

        this.getUsersOrder = function () {
            if (!hasOrderWithDetails() || vm.selectedOrder.details.length <= 0) {
                return 0;
            }
            var total = 0;
            (vm.findUserOrder().order || []).forEach(function (item) {
                total += item.price;
            });
            return (total / 100).toFixed(2);
        };

        function hasOrderWithDetails() {
            return vm.selectedOrder && vm.selectedOrder.details;
        }

    }
    WizardCtrl.$inject = ["$log", "NotifyService", "fbutil", "UserModel"];

    angular
        .module('app.controllers.order-wizard')
        .controller('WizardCtrl', WizardCtrl);

})();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImpzL19tb2R1bGUuanMiLCJqcy9jb250cm9sbGVycy9fbW9kdWxlLmpzIiwianMvZGlyZWN0aXZlcy9fbW9kdWxlLmpzIiwianMvZmlsdGVycy9fbW9kdWxlLmpzIiwianMvZmlyZWJhc2UvX21vZHVsZS5qcyIsImpzL2ludGVyY2VwdG9ycy9fbW9kdWxlLmpzIiwianMvbW9kZWxzL19tb2R1bGUuanMiLCJqcy9ub3RpZnkvX21vZHVsZS5qcyIsImpzL3NlcnZpY2VzL19tb2R1bGUuanMiLCJqcy9jb250cm9sbGVycy9ob21lL19tb2R1bGUuanMiLCJqcy9jb250cm9sbGVycy9tZW51cy9fbW9kdWxlLmpzIiwianMvY29udHJvbGxlcnMvbmF2aWdhdGlvbi9fbW9kdWxlLmpzIiwianMvY29udHJvbGxlcnMvb3JkZXJzL19tb2R1bGUuanMiLCJqcy9jb250cm9sbGVycy9yZXN0YXVyYW50L19tb2R1bGUuanMiLCJqcy9jb250cm9sbGVycy93aXphcmQvX21vZHVsZS5qcyIsImpzL2NvbnN0YW50cy5qcyIsImpzL3JvdXRlcy5qcyIsImpzL2NvbnRyb2xsZXJzL0FwcEN0cmwuanMiLCJqcy9maXJlYmFzZS9maXJlYmFzZS51dGlscy5qcyIsImpzL2ludGVyY2VwdG9ycy9IdHRwTG9nZ2luZ0ludGVyY2VwdG9yLmpzIiwianMvbW9kZWxzL1VzZXJNb2RlbC5qcyIsImpzL25vdGlmeS9Ob3RpZnlTZXJ2aWNlLmpzIiwianMvc2VydmljZXMvRGF0ZVNlcnZpY2UuanMiLCJqcy9jb250cm9sbGVycy9ob21lL0hvbWVDdHJsLmpzIiwianMvY29udHJvbGxlcnMvbWVudXMvQ3JlYXRlTWVudUN0cmwuanMiLCJqcy9jb250cm9sbGVycy9tZW51cy9MaXN0TWVudXNDdHJsLmpzIiwianMvY29udHJvbGxlcnMvbmF2aWdhdGlvbi9Ub3BOYXZDdHJsLmpzIiwianMvY29udHJvbGxlcnMvb3JkZXJzL09yZGVyc0N0cmwuanMiLCJqcy9jb250cm9sbGVycy9yZXN0YXVyYW50L0NyZWF0ZVJlc3RhdXJhbnRDdHJsLmpzIiwianMvY29udHJvbGxlcnMvcmVzdGF1cmFudC9MaXN0UmVzdGF1cmFudEN0cmwuanMiLCJqcy9jb250cm9sbGVycy93aXphcmQvUGxhY2VPcmRlckN0cmwuanMiLCJqcy9jb250cm9sbGVycy93aXphcmQvV2l6YXJkQ3RybC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTs7SUFFQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtJQUNBOztJQUVBOztBQUVBO0FDeEJBOztBQUVBOztJQUVBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO0lBQ0E7O0FBRUE7QUNiQTs7QUFFQTs7SUFFQTs7QUFFQTtBQ05BOztBQUVBOztJQUVBOztBQUVBO0FDTkE7O0FBRUE7SUFDQTtBQUNBO0FDSkE7O0FBRUE7O0lBRUE7O0FBRUE7QUNOQTs7QUFFQTtJQUNBOztBQUVBO0FDTEE7O0FBRUE7O0lBRUE7O0lBRUEsaUNBQUEsV0FBQTtRQUNBO1lBQ0E7WUFDQTtRQUNBO0lBQ0EsQ0FBQSxDQUFBOztBQUVBO0FDYkE7O0FBRUE7SUFDQTtBQUNBO0FDSkE7O0FBRUE7O0lBRUE7O0FBRUE7QUNOQTs7QUFFQTs7SUFFQTs7QUFFQTtBQ05BOztBQUVBOztJQUVBOztBQUVBO0FDTkE7O0FBRUE7O0lBRUE7O0FBRUE7QUNOQTs7QUFFQTs7SUFFQTs7QUFFQTtBQ05BOztBQUVBOztJQUVBOztBQUVBO0FDTkE7O0FBRUE7O0lBRUE7S0FDQTtLQUNBO0lBQ0E7UUFDQTs7UUFFQTtRQUNBOztRQUVBO1FBQ0E7O0FBRUE7QUNoQkE7QUFDQTs7SUFFQTtLQUNBO0tBQ0E7SUFDQSxhQUFBLHdDQUFBOztRQUVBO1lBQ0E7WUFDQSxhQUFBLGNBQUE7UUFDQTs7UUFFQTtTQUNBO1NBQ0E7UUFDQTtZQUNBO1lBQ0EsYUFBQSxnQkFBQTtRQUNBOztRQUVBO1NBQ0E7U0FDQTtRQUNBO1lBQ0E7WUFDQSxhQUFBLGdCQUFBO1FBQ0E7UUFDQTtZQUNBO1lBQ0EsYUFBQSxvQkFBQTtRQUNBOztRQUVBO1NBQ0E7U0FDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O1FBRUE7U0FDQTtTQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7UUFFQTtTQUNBO1NBQ0E7UUFDQTtZQUNBO1FBQ0E7O1FBRUE7UUFDQTs7SUFFQSxDQUFBLENBQUEsQ0FBQTs7O0lBRUE7UUFDQTtRQUNBOzs7QUFHQTtBQzFFQTs7QUFFQTs7SUFFQTtLQUNBO0tBQ0E7SUFDQTs7UUFFQTtRQUNBOztRQUVBO1lBQ0E7WUFDQTtZQUNBO1FBQ0E7O0lBRUEsQ0FBQTs7O0lBRUE7UUFDQTtRQUNBLGFBQUEsT0FBQTs7QUFFQTs7QUN2QkE7QUFDQTtHQUNBLFVBQUEsTUFBQTtNQUNBOztNQUVBO1FBQ0E7VUFDQTtRQUNBOztRQUVBO1VBQ0E7UUFDQTs7UUFFQTtNQUNBOztNQUVBO1FBQ0E7VUFDQTtZQUNBO1VBQ0E7VUFDQTtZQUNBO1VBQ0E7UUFDQTtRQUNBO01BQ0E7O01BRUE7T0FDQTtPQUNBO09BQ0E7U0FDQTtTQUNBO09BQ0E7T0FDQTtPQUNBO09BQ0E7T0FDQTtPQUNBO09BQ0E7TUFDQTtRQUNBO1FBQ0E7UUFDQTtVQUNBO1FBQ0E7UUFDQTtNQUNBOztNQUVBO09BQ0E7T0FDQTtPQUNBO09BQ0E7U0FDQTtTQUNBO1NBQ0E7U0FDQTtTQUNBO1NBQ0E7T0FDQTtPQUNBO09BQ0E7T0FDQTtPQUNBO09BQ0E7T0FDQTtPQUNBO09BQ0E7T0FDQTtPQUNBO01BQ0E7UUFDQTtRQUNBO1FBQ0E7VUFDQTtZQUNBO1lBQ0E7WUFDQTtVQUNBO1FBQ0E7UUFDQTtNQUNBO0dBQ0E7OztBQ3RGQTs7QUFFQTs7SUFFQTtLQUNBO0tBQ0E7SUFDQSw0Q0FBQSxrQkFBQSxHQUFBLGVBQUE7O1FBRUE7WUFDQTtRQUNBOztRQUVBO1lBQ0E7Z0JBQ0E7b0JBQ0E7Z0JBQ0E7Z0JBQ0E7WUFDQTs7WUFFQTtnQkFDQTtnQkFDQTtZQUNBOztZQUVBO2dCQUNBO29CQUNBO2dCQUNBO2dCQUNBO1lBQ0E7O1lBRUE7Z0JBQ0E7Z0JBQ0E7WUFDQTtRQUNBO0lBQ0EsQ0FBQSxDQUFBOztJQUVBO1FBQ0EsaUNBQUEsa0JBQUE7SUFDQTs7QUFFQTtBQzVDQTs7QUFFQTtJQUNBO0tBQ0E7S0FDQTtJQUNBOztRQUVBO1lBQ0E7YUFDQTthQUNBO1lBQ0E7UUFDQTtJQUNBOztJQUVBLHNDQUFBLFNBQUE7QUFDQTtBQ2pCQTs7QUFFQTs7SUFFQTtLQUNBO0tBQ0E7SUFDQSxvQkFBQSxXQUFBOztRQUVBO1NBQ0E7U0FDQTtTQUNBO1NBQ0E7UUFDQTtZQUNBO1FBQ0E7O1FBRUE7U0FDQTtTQUNBO1NBQ0E7U0FDQTtRQUNBO1lBQ0E7UUFDQTs7UUFFQTtTQUNBO1NBQ0E7U0FDQTtTQUNBO1FBQ0E7WUFDQTtRQUNBOztRQUVBO1NBQ0E7U0FDQTtTQUNBO1NBQ0E7UUFDQTtZQUNBO1FBQ0E7SUFDQSxDQUFBLENBQUEsQ0FBQTs7O0lBRUE7UUFDQTtRQUNBLFVBQUEsYUFBQTs7QUFFQTtBQ2xEQTs7QUFFQTs7SUFFQTtLQUNBO0tBQ0E7SUFDQTs7UUFFQTtTQUNBO1NBQ0E7U0FDQTtTQUNBO1FBQ0E7WUFDQTtRQUNBOztRQUVBO1NBQ0E7U0FDQTtTQUNBO1NBQ0E7UUFDQTtZQUNBO1FBQ0E7SUFDQTs7SUFFQTtRQUNBO1FBQ0EsVUFBQSxXQUFBOztBQUVBO0FDaENBOztBQUVBOztJQUVBO0tBQ0E7S0FDQTtJQUNBOztRQUVBO1FBQ0E7O1FBRUE7UUFDQTtRQUNBO1FBQ0E7UUFDQTs7SUFFQSxDQUFBOzs7SUFFQTtRQUNBO1FBQ0EsYUFBQSxRQUFBOztBQUVBO0FDeEJBOztBQUVBOztJQUVBO0tBQ0E7S0FDQTtJQUNBOztRQUVBO1FBQ0E7O1FBRUE7UUFDQTtRQUNBOztRQUVBO1FBQ0E7O1FBRUE7UUFDQTtRQUNBOztRQUVBO1FBQ0E7O1FBRUE7UUFDQTtZQUNBO1lBQ0E7Z0JBQ0E7b0JBQ0E7Z0JBQ0E7WUFDQTtZQUNBO1FBQ0E7O1FBRUE7WUFDQTtZQUNBOztZQUVBO2dCQUNBO1lBQ0E7WUFDQTs7WUFFQTtZQUNBOztZQUVBO2dCQUNBO2dCQUNBO29CQUNBO3dCQUNBO29CQUNBO2dCQUNBO2dCQUNBO1lBQ0E7UUFDQTs7UUFFQTtZQUNBO1FBQ0E7O1FBRUE7WUFDQTtnQkFDQTtZQUNBO1FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0lBR0EsQ0FBQTs7O0lBRUE7UUFDQTtRQUNBLGFBQUEsY0FBQTs7QUFFQTtBQy9GQTs7QUFFQTs7SUFFQTtLQUNBO0tBQ0E7SUFDQTs7UUFFQTtRQUNBOztRQUVBO1FBQ0E7O1FBRUE7O1FBRUE7O1FBRUE7WUFDQTtZQUNBO1FBQ0E7SUFDQSxDQUFBOzs7SUFFQTtRQUNBO1FBQ0EsYUFBQSxhQUFBOztBQUVBO0FDN0JBOztBQUVBOztJQUVBO0tBQ0E7S0FDQTtJQUNBOztRQUVBO1FBQ0E7O1FBRUE7O1FBRUE7O1FBRUE7UUFDQTs7UUFFQTtRQUNBO1lBQ0E7UUFDQTs7UUFFQTtZQUNBO1lBQ0E7Z0JBQ0E7UUFDQTs7UUFFQTtZQUNBO1lBQ0E7WUFDQTtZQUNBO1lBQ0E7UUFDQTs7UUFFQTtZQUNBO2dCQUNBO2dCQUNBO2dCQUNBO1lBQ0E7UUFDQTs7UUFFQTtZQUNBO1lBQ0E7UUFDQTtJQUNBLENBQUE7OztJQUVBO1FBQ0E7UUFDQSxhQUFBLFVBQUE7O0FBRUE7QUN4REE7O0FBRUE7O0lBRUE7S0FDQTtLQUNBO0lBQ0E7O1FBRUE7UUFDQTs7UUFFQTs7UUFFQTs7UUFFQTs7UUFFQTtRQUNBOztRQUVBO1FBQ0E7WUFDQTtnQkFDQTtnQkFDQTtnQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtnQkFDQTtZQUNBO1FBQ0E7O1FBRUE7O1lBRUE7WUFDQTs7WUFFQTtnQkFDQTtvQkFDQTtnQkFDQTtvQkFDQTtnQkFDQTtZQUNBO1FBQ0E7O1FBRUE7WUFDQTtnQkFDQTtvQkFDQTtnQkFDQTtvQkFDQTtnQkFDQTtRQUNBOztRQUVBO1lBQ0E7Z0JBQ0E7Z0JBQ0E7Z0JBQ0E7Z0JBQ0E7b0JBQ0E7Z0JBQ0E7Z0JBQ0E7WUFDQTtRQUNBO0lBQ0EsQ0FBQTs7O0lBRUE7UUFDQTtRQUNBLGFBQUEsVUFBQTs7QUFFQTtBQ3ZGQTs7QUFFQTs7SUFFQTtLQUNBO0tBQ0E7SUFDQTs7UUFFQTtRQUNBOztRQUVBO1FBQ0E7O1FBRUE7UUFDQTs7UUFFQTtZQUNBO1lBQ0E7WUFDQTtRQUNBOztRQUVBO1lBQ0E7O1lBRUE7O1lBRUE7Z0JBQ0E7Z0JBQ0E7Z0JBQ0E7WUFDQTtRQUNBO0lBQ0EsQ0FBQTs7O0lBRUE7UUFDQTtRQUNBLGFBQUEsb0JBQUE7O0FBRUE7QUN6Q0E7O0FBRUE7O0lBRUE7S0FDQTtLQUNBO0lBQ0E7O1FBRUE7UUFDQTs7UUFFQTtRQUNBOztRQUVBOztJQUVBLENBQUE7OztJQUVBO1FBQ0E7UUFDQSxhQUFBLGtCQUFBOztBQUVBO0FDdkJBOztBQUVBOztJQUVBO0tBQ0E7S0FDQTtJQUNBOztRQUVBOztRQUVBO1FBQ0E7O1FBRUE7O1FBRUE7O1FBRUE7WUFDQTtnQkFDQTtZQUNBOztRQUVBOztRQUVBO1lBQ0E7Z0JBQ0E7WUFDQTtZQUNBO1lBQ0E7Z0JBQ0E7b0JBQ0E7d0JBQ0E7b0JBQ0E7Z0JBQ0E7WUFDQTtZQUNBO1FBQ0E7O1FBRUE7WUFDQTtnQkFDQTtZQUNBOztZQUVBO1lBQ0E7Z0JBQ0E7b0JBQ0E7d0JBQ0E7NEJBQ0E7Z0NBQ0E7Z0NBQ0E7Z0NBQ0E7NEJBQ0E7d0JBQ0E7NEJBQ0E7d0JBQ0E7b0JBQ0E7Z0JBQ0E7WUFDQTtRQUNBOztRQUVBO0lBQ0EsQ0FBQTs7O0lBRUE7UUFDQTtRQUNBLGFBQUEsY0FBQTs7QUFFQTtBQ3RFQTs7QUFFQTs7SUFFQTtLQUNBO0tBQ0E7SUFDQTs7UUFFQTs7UUFFQTtRQUNBOztRQUVBOztRQUVBOztRQUVBOztRQUVBOztRQUVBO1FBQ0E7WUFDQTtRQUNBOztRQUVBO1lBQ0E7Z0JBQ0E7Z0JBQ0E7WUFDQTs7WUFFQTtnQkFDQTtZQUNBO2dCQUNBO1lBQ0E7UUFDQTs7UUFFQTtZQUNBO2dCQUNBO1lBQ0E7O1lBRUE7Z0JBQ0E7WUFDQTtRQUNBOztRQUVBO1lBQ0E7Z0JBQ0E7WUFDQTs7WUFFQTtnQkFDQTtZQUNBO1lBQ0E7UUFDQTs7UUFFQTtZQUNBOztZQUVBO2dCQUNBO1lBQ0E7WUFDQTtZQUNBO2dCQUNBO29CQUNBO29CQUNBO29CQUNBO2dCQUNBO1FBQ0E7O1FBRUE7WUFDQTtZQUNBO2dCQUNBO29CQUNBO29CQUNBO2dCQUNBO1FBQ0E7O1FBRUE7WUFDQTtnQkFDQTtZQUNBO1lBQ0E7WUFDQTtnQkFDQTtZQUNBO1lBQ0E7UUFDQTs7UUFFQTtZQUNBO1FBQ0E7O0lBRUEsQ0FBQTs7O0lBRUE7UUFDQTtRQUNBLGFBQUEsVUFBQTs7QUFFQSIsImZpbGUiOiJhcHAubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG4oZnVuY3Rpb24gKCkge1xuXG4gICAgdmFyIHJlcXVpcmVzID0gW1xuICAgICAgICAvLyAzcmQgUGFydHlcbiAgICAgICAgJ25nUm91dGUnLFxuICAgICAgICAnZmlyZWJhc2UnLFxuICAgICAgICAndWkuYm9vdHN0cmFwJyxcbiAgICAgICAgLy8gM3JkIHBhcnR5IHdyYXBwZXJzXG4gICAgICAgICdhcHAubGlicy5maXJlYmFzZS51dGlscycsXG4gICAgICAgIC8vIEludGVybmFsc1xuICAgICAgICAnYXBwLmNvbnRyb2xsZXJzJyxcbiAgICAgICAgJ2FwcC5zZXJ2aWNlcycsXG4gICAgICAgICdhcHAuZmlsdGVycycsXG4gICAgICAgICdhcHAuZGlyZWN0aXZlcycsXG4gICAgICAgICdhcHAubW9kZWxzJyxcbiAgICAgICAgJ2FwcC5yb3V0ZXMnLFxuICAgICAgICAnYXBwLmludGVyY2VwdG9ycycsXG4gICAgICAgICdhcHAubm90aWZ5J1xuICAgIF07XG5cbiAgICBhbmd1bGFyLm1vZHVsZSgnYXBwJywgcmVxdWlyZXMpO1xuXG59KSgpOyIsIid1c2Ugc3RyaWN0JztcblxuKGZ1bmN0aW9uICgpIHtcblxuICAgIGFuZ3VsYXIubW9kdWxlKCdhcHAuY29udHJvbGxlcnMnLCBbXG4gICAgICAgICdhcHAuY29udHJvbGxlcnMuaG9tZScsXG4gICAgICAgICdhcHAuY29udHJvbGxlcnMubWVudXMnLFxuICAgICAgICAnYXBwLmNvbnRyb2xsZXJzLm9yZGVycycsXG4gICAgICAgICdhcHAuY29udHJvbGxlcnMucmVzdGF1cmFudCcsXG4gICAgICAgICdhcHAuY29udHJvbGxlcnMub3JkZXItd2l6YXJkJyxcbiAgICAgICAgJ2FwcC5jb250cm9sbGVycy5uYXZpZ2F0aW9uJ1xuICAgIF0pO1xuXG59KSgpOyIsIid1c2Ugc3RyaWN0JztcblxuKGZ1bmN0aW9uICgpIHtcblxuICAgIGFuZ3VsYXIubW9kdWxlKCdhcHAuZGlyZWN0aXZlcycsIFtdKTtcblxufSkoKTsiLCIndXNlIHN0cmljdCc7XG5cbihmdW5jdGlvbiAoKSB7XG5cbiAgICBhbmd1bGFyLm1vZHVsZSgnYXBwLmZpbHRlcnMnLCBbXSk7XG5cbn0pKCk7IiwiJ3VzZSBzdHJpY3QnO1xuXG4oZnVuY3Rpb24gKCkge1xuICAgIGFuZ3VsYXIubW9kdWxlKCdhcHAubGlicy5maXJlYmFzZS51dGlscycsIFtdKTtcbn0pKCk7IiwiJ3VzZSBzdHJpY3QnO1xuXG4oZnVuY3Rpb24gKCkge1xuXG4gICAgYW5ndWxhci5tb2R1bGUoJ2FwcC5pbnRlcmNlcHRvcnMnLCBbXSk7XG5cbn0pKCk7IiwiJ3VzZSBzdHJpY3QnO1xuXG4oZnVuY3Rpb24gKCkge1xuICAgIGFuZ3VsYXIubW9kdWxlKCdhcHAubW9kZWxzJywgW10pO1xuXG59KSgpOyIsIid1c2Ugc3RyaWN0JztcblxuKGZ1bmN0aW9uICgpIHtcblxuICAgIGFuZ3VsYXIubW9kdWxlKCdhcHAubm90aWZ5JywgWydjZ05vdGlmeSddKTtcblxuICAgIGFuZ3VsYXIubW9kdWxlKCdhcHAubm90aWZ5JykucnVuKGZ1bmN0aW9uIChub3RpZnkpIHtcbiAgICAgICAgbm90aWZ5LmNvbmZpZyh7XG4gICAgICAgICAgICBkdXJhdGlvbjogMjAwMCxcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnL3d3dy1idWlsZC92aWV3cy90ZW1wbGF0ZXMvYW5ndWxhci1ub3RpZnkuaHRtbCdcbiAgICAgICAgfSk7XG4gICAgfSk7XG5cbn0pKCk7IiwiJ3VzZSBzdHJpY3QnO1xuXG4oZnVuY3Rpb24gKCkge1xuICAgIGFuZ3VsYXIubW9kdWxlKCdhcHAuc2VydmljZXMnLCBbXSk7XG59KSgpOyIsIid1c2Ugc3RyaWN0JztcblxuKGZ1bmN0aW9uICgpIHtcblxuICAgIGFuZ3VsYXIubW9kdWxlKCdhcHAuY29udHJvbGxlcnMuaG9tZScsIFtdKTtcblxufSkoKTsiLCIndXNlIHN0cmljdCc7XG5cbihmdW5jdGlvbiAoKSB7XG5cbiAgICBhbmd1bGFyLm1vZHVsZSgnYXBwLmNvbnRyb2xsZXJzLm1lbnVzJywgW10pO1xuXG59KSgpOyIsIid1c2Ugc3RyaWN0JztcblxuKGZ1bmN0aW9uICgpIHtcblxuICAgIGFuZ3VsYXIubW9kdWxlKCdhcHAuY29udHJvbGxlcnMubmF2aWdhdGlvbicsIFtdKTtcblxufSkoKTsiLCIndXNlIHN0cmljdCc7XG5cbihmdW5jdGlvbiAoKSB7XG5cbiAgICBhbmd1bGFyLm1vZHVsZSgnYXBwLmNvbnRyb2xsZXJzLm9yZGVycycsIFtdKTtcblxufSkoKTsiLCIndXNlIHN0cmljdCc7XG5cbihmdW5jdGlvbiAoKSB7XG5cbiAgICBhbmd1bGFyLm1vZHVsZSgnYXBwLmNvbnRyb2xsZXJzLnJlc3RhdXJhbnQnLCBbXSk7XG5cbn0pKCk7IiwiJ3VzZSBzdHJpY3QnO1xuXG4oZnVuY3Rpb24gKCkge1xuXG4gICAgYW5ndWxhci5tb2R1bGUoJ2FwcC5jb250cm9sbGVycy5vcmRlci13aXphcmQnLCBbXSk7XG5cbn0pKCk7IiwiJ3VzZSBzdHJpY3QnO1xuXG4oZnVuY3Rpb24gKCkge1xuXG4gICAgLyoqXG4gICAgICogQmFzaWMgYXBwIHZlcnNpb24gY29uc3RhbnRcbiAgICAgKi9cbiAgICBhbmd1bGFyXG4gICAgICAgIC5tb2R1bGUoJ2FwcCcpXG5cbiAgICAgICAgLy8gQXBwIHZlcnNpb25cbiAgICAgICAgLmNvbnN0YW50KCd2ZXJzaW9uJywgJzAuMC4xJylcblxuICAgICAgICAvLyB5b3VyIEZpcmViYXNlIGRhdGEgVVJMIGdvZXMgaGVyZSwgbm8gdHJhaWxpbmcgc2xhc2hcbiAgICAgICAgLmNvbnN0YW50KCdGQlVSTCcsICdodHRwczovL2J1Zy1mcmVlLWZvb2QuZmlyZWJhc2Vpby5jb20nKTtcblxufSkoKTsiLCIndXNlIHN0cmljdCc7XG4oZnVuY3Rpb24gKCkge1xuXG4gICAgLyoqXG4gICAgICogQG5nSW5qZWN0XG4gICAgICovXG4gICAgdmFyIFJvdXRlcyA9IGZ1bmN0aW9uICgkcm91dGVQcm92aWRlciwgJGxvY2F0aW9uUHJvdmlkZXIpIHtcblxuICAgICAgICAkcm91dGVQcm92aWRlci53aGVuKCcvJywge1xuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcvd3d3LWJ1aWxkL3ZpZXdzL3BhcnRpYWxzL2hvbWUvaW5kZXguaHRtbCcsXG4gICAgICAgICAgICBjb250cm9sbGVyOiAnSG9tZUN0cmwgYXMgaGMnXG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBPcmRlcnMgTWFuYWdlbWVudFxuICAgICAgICAgKi9cbiAgICAgICAgJHJvdXRlUHJvdmlkZXIud2hlbignL29yZGVycy9saXN0Jywge1xuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcvd3d3LWJ1aWxkL3ZpZXdzL3BhcnRpYWxzL29yZGVycy9vcmRlcnMuaHRtbCcsXG4gICAgICAgICAgICBjb250cm9sbGVyOiAnT3JkZXJzQ3RybCBhcyB2bSdcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIE9yZGVyIFdpemFyZFxuICAgICAgICAgKi9cbiAgICAgICAgJHJvdXRlUHJvdmlkZXIud2hlbignL29yZGVyLXdpemFyZC9teS1vcmRlcicsIHtcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnL3d3dy1idWlsZC92aWV3cy9wYXJ0aWFscy9vcmRlci13aXphcmQvbXktb3JkZXIuaHRtbCcsXG4gICAgICAgICAgICBjb250cm9sbGVyOiAnV2l6YXJkQ3RybCBhcyB2bSdcbiAgICAgICAgfSk7XG4gICAgICAgICRyb3V0ZVByb3ZpZGVyLndoZW4oJy9vcmRlci13aXphcmQvcGxhY2Utb3JkZXIvOm9yZGVySWQnLCB7XG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy93d3ctYnVpbGQvdmlld3MvcGFydGlhbHMvb3JkZXItd2l6YXJkL3BsYWNlLW9yZGVyLmh0bWwnLFxuICAgICAgICAgICAgY29udHJvbGxlcjogJ1BsYWNlT3JkZXJDdHJsIGFzIHZtJ1xuICAgICAgICB9KTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogTWVudXMgTWFuYWdlbWVudFxuICAgICAgICAgKi9cbi8vICAgICAgICAkcm91dGVQcm92aWRlci53aGVuKCcvbWVudXMvbGlzdCcsIHtcbi8vICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcvd3d3LWJ1aWxkL3ZpZXdzL3BhcnRpYWxzL21lbnVzL21lbnVzLmh0bWwnLFxuLy8gICAgICAgICAgICBjb250cm9sbGVyOiAnTGlzdE1lbnVzQ3RybCBhcyBsbWMnXG4vLyAgICAgICAgfSk7XG4vLyAgICAgICAgJHJvdXRlUHJvdmlkZXIud2hlbignL21lbnVzL2NyZWF0ZScsIHtcbi8vICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcvd3d3LWJ1aWxkL3ZpZXdzL3BhcnRpYWxzL21lbnVzL2NyZWF0ZS5odG1sJyxcbi8vICAgICAgICAgICAgY29udHJvbGxlcjogJ0NyZWF0ZU1lbnVDdHJsIGFzIGNtYydcbi8vICAgICAgICB9KTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogUmVzdGF1cmFudCBNYW5hZ2VtZW50XG4gICAgICAgICAqL1xuLy8gICAgICAgICRyb3V0ZVByb3ZpZGVyLndoZW4oJy9yZXN0YXVyYW50cy9saXN0Jywge1xuLy8gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy93d3ctYnVpbGQvdmlld3MvcGFydGlhbHMvcmVzdGF1cmFudC9yZXN0YXVyYW50Lmh0bWwnLFxuLy8gICAgICAgICAgICBjb250cm9sbGVyOiAnTGlzdFJlc3RhdXJhbnRDdHJsIGFzIGxyYydcbi8vICAgICAgICB9KTtcbi8vICAgICAgICAkcm91dGVQcm92aWRlci53aGVuKCcvcmVzdGF1cmFudHMvY3JlYXRlJywge1xuLy8gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy93d3ctYnVpbGQvdmlld3MvcGFydGlhbHMvcmVzdGF1cmFudC9jcmVhdGUuaHRtbCcsXG4vLyAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdDcmVhdGVSZXN0YXVyYW50Q3RybCBhcyBjcmMnXG4vLyAgICAgICAgfSk7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEZhbGxiYWNrXG4gICAgICAgICAqL1xuICAgICAgICAkcm91dGVQcm92aWRlci5vdGhlcndpc2Uoe1xuICAgICAgICAgICAgcmVkaXJlY3RUbzogJy8nXG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIERpc2FibGUgaHRtbCA1IG1vZGUgZHVlIHRvIElFOSBjb21wYXRpYmlsaXR5IHJlcXVpcmVtZW50IVxuICAgICAgICAkbG9jYXRpb25Qcm92aWRlci5odG1sNU1vZGUoZmFsc2UpO1xuXG4gICAgfTtcblxuICAgIGFuZ3VsYXJcbiAgICAgICAgLm1vZHVsZSgnYXBwLnJvdXRlcycsIFtdKVxuICAgICAgICAuY29uZmlnKFJvdXRlcyk7XG5cblxufSkoKTsiLCIndXNlIHN0cmljdCc7XG5cbihmdW5jdGlvbiAoKSB7XG5cbiAgICAvKipcbiAgICAgKiBAbmdJbmplY3RcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBBcHBDdHJsKCRsb2csICRyb290U2NvcGUsIE5vdGlmeVNlcnZpY2UpIHtcblxuICAgICAgICAvLyBWaWV3TW9kZWxcbiAgICAgICAgdmFyIHZtID0gdGhpcztcblxuICAgICAgICAkcm9vdFNjb3BlLiRvbihcIiRyb3V0ZUNoYW5nZUVycm9yXCIsIGZ1bmN0aW9uIChldmVudCwgY3VycmVudCwgcHJldmlvdXMsIHJlamVjdGlvbikge1xuICAgICAgICAgICAgdmFyIG1lc3NhZ2UgPSAnRmFpbGVkIHRvIGNoYW5nZSByb3V0ZSBbJyArIChyZWplY3Rpb24uZGF0YS5lcnJvciA/IHJlamVjdGlvbi5kYXRhLmVycm9yIDogcmVqZWN0aW9uLmRhdGEpICsgJ10nO1xuICAgICAgICAgICAgJGxvZy5lcnJvcihtZXNzYWdlKTtcbiAgICAgICAgICAgIE5vdGlmeVNlcnZpY2UuZGFuZ2VyKG1lc3NhZ2UpO1xuICAgICAgICB9KTtcblxuICAgIH1cblxuICAgIGFuZ3VsYXJcbiAgICAgICAgLm1vZHVsZSgnYXBwLmNvbnRyb2xsZXJzJylcbiAgICAgICAgLmNvbnRyb2xsZXIoJ0FwcEN0cmwnLCBBcHBDdHJsKTtcblxufSkoKTsiLCJcbi8vIGEgc2ltcGxlIHdyYXBwZXIgb24gRmlyZWJhc2UgYW5kIEFuZ3VsYXJGaXJlIHRvIHNpbXBsaWZ5IGRlcHMgYW5kIGtlZXAgdGhpbmdzIERSWVxuYW5ndWxhci5tb2R1bGUoJ2FwcC5saWJzLmZpcmViYXNlLnV0aWxzJywgWydmaXJlYmFzZSddKVxuICAgLmZhY3RvcnkoJ2ZidXRpbCcsIFsnJHdpbmRvdycsICdGQlVSTCcsICckZmlyZWJhc2UnLCBmdW5jdGlvbigkd2luZG93LCBGQlVSTCwgJGZpcmViYXNlKSB7XG4gICAgICBcInVzZSBzdHJpY3RcIjtcblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc3luY09iamVjdDogZnVuY3Rpb24ocGF0aCwgZmFjdG9yeUNvbmZpZykge1xuICAgICAgICAgIHJldHVybiBzeW5jRGF0YS5hcHBseShudWxsLCBhcmd1bWVudHMpLiRhc09iamVjdCgpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHN5bmNBcnJheTogZnVuY3Rpb24ocGF0aCwgZmFjdG9yeUNvbmZpZykge1xuICAgICAgICAgIHJldHVybiBzeW5jRGF0YS5hcHBseShudWxsLCBhcmd1bWVudHMpLiRhc0FycmF5KCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgcmVmOiBmaXJlYmFzZVJlZlxuICAgICAgfTtcblxuICAgICAgZnVuY3Rpb24gcGF0aFJlZihhcmdzKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGlmIChhbmd1bGFyLmlzQXJyYXkoYXJnc1tpXSkpIHtcbiAgICAgICAgICAgIGFyZ3NbaV0gPSBwYXRoUmVmKGFyZ3NbaV0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIGlmKCB0eXBlb2YgYXJnc1tpXSAhPT0gJ3N0cmluZycgKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0FyZ3VtZW50ICcraSsnIHRvIGZpcmViYXNlUmVmIGlzIG5vdCBhIHN0cmluZzogJythcmdzW2ldKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFyZ3Muam9pbignLycpO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIEV4YW1wbGU6XG4gICAgICAgKiA8Y29kZT5cbiAgICAgICAqICAgIGZ1bmN0aW9uKGZpcmViYXNlUmVmKSB7XG4gICAgICAgICAqICAgICAgIHZhciByZWYgPSBmaXJlYmFzZVJlZigncGF0aC90by9kYXRhJyk7XG4gICAgICAgICAqICAgIH1cbiAgICAgICAqIDwvY29kZT5cbiAgICAgICAqXG4gICAgICAgKiBAZnVuY3Rpb25cbiAgICAgICAqIEBuYW1lIGZpcmViYXNlUmVmXG4gICAgICAgKiBAcGFyYW0ge1N0cmluZ3xBcnJheS4uLn0gcGF0aCByZWxhdGl2ZSBwYXRoIHRvIHRoZSByb290IGZvbGRlciBpbiBGaXJlYmFzZSBpbnN0YW5jZVxuICAgICAgICogQHJldHVybiBhIEZpcmViYXNlIGluc3RhbmNlXG4gICAgICAgKi9cbiAgICAgIGZ1bmN0aW9uIGZpcmViYXNlUmVmKHBhdGgpIHtcbiAgICAgICAgdmFyIHJlZiA9IG5ldyAkd2luZG93LkZpcmViYXNlKEZCVVJMKTtcbiAgICAgICAgdmFyIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpO1xuICAgICAgICBpZiggYXJncy5sZW5ndGggKSB7XG4gICAgICAgICAgcmVmID0gcmVmLmNoaWxkKHBhdGhSZWYoYXJncykpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZWY7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogQ3JlYXRlIGEgJGZpcmViYXNlIHJlZmVyZW5jZSB3aXRoIGp1c3QgYSByZWxhdGl2ZSBwYXRoLiBGb3IgZXhhbXBsZTpcbiAgICAgICAqXG4gICAgICAgKiA8Y29kZT5cbiAgICAgICAqIGZ1bmN0aW9uKHN5bmNEYXRhKSB7XG4gICAgICAgICAqICAgIC8vIGEgcmVndWxhciAkZmlyZWJhc2UgcmVmXG4gICAgICAgICAqICAgICRzY29wZS53aWRnZXQgPSBzeW5jRGF0YSgnd2lkZ2V0cy9hbHBoYScpO1xuICAgICAgICAgKlxuICAgICAgICAgKiAgICAvLyBvciBhdXRvbWF0aWMgMy13YXkgYmluZGluZ1xuICAgICAgICAgKiAgICBzeW5jRGF0YSgnd2lkZ2V0cy9hbHBoYScpLiRiaW5kKCRzY29wZSwgJ3dpZGdldCcpO1xuICAgICAgICAgKiB9XG4gICAgICAgKiA8L2NvZGU+XG4gICAgICAgKlxuICAgICAgICogUHJvcHMgaXMgdGhlIHNlY29uZCBwYXJhbSBwYXNzZWQgaW50byAkZmlyZWJhc2UuIEl0IGNhbiBhbHNvIGNvbnRhaW4gbGltaXQsIHN0YXJ0QXQsIGVuZEF0LFxuICAgICAgICogYW5kIHRoZXkgd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSByZWYgYmVmb3JlIHBhc3NpbmcgaW50byAkZmlyZWJhc2VcbiAgICAgICAqXG4gICAgICAgKiBAZnVuY3Rpb25cbiAgICAgICAqIEBuYW1lIHN5bmNEYXRhXG4gICAgICAgKiBAcGFyYW0ge1N0cmluZ3xBcnJheS4uLn0gcGF0aCByZWxhdGl2ZSBwYXRoIHRvIHRoZSByb290IGZvbGRlciBpbiBGaXJlYmFzZSBpbnN0YW5jZVxuICAgICAgICogQHBhcmFtIHtvYmplY3R9IFtwcm9wc11cbiAgICAgICAqIEByZXR1cm4gYSBGaXJlYmFzZSBpbnN0YW5jZVxuICAgICAgICovXG4gICAgICBmdW5jdGlvbiBzeW5jRGF0YShwYXRoLCBwcm9wcykge1xuICAgICAgICB2YXIgcmVmID0gZmlyZWJhc2VSZWYocGF0aCk7XG4gICAgICAgIHByb3BzID0gYW5ndWxhci5leHRlbmQoe30sIHByb3BzKTtcbiAgICAgICAgYW5ndWxhci5mb3JFYWNoKFsnbGltaXQnLCAnc3RhcnRBdCcsICdlbmRBdCddLCBmdW5jdGlvbihrKSB7XG4gICAgICAgICAgaWYoIHByb3BzLmhhc093blByb3BlcnR5KGspICkge1xuICAgICAgICAgICAgdmFyIHYgPSBwcm9wc1trXTtcbiAgICAgICAgICAgIHJlZiA9IHJlZltrXS5hcHBseShyZWYsIGFuZ3VsYXIuaXNBcnJheSh2KT8gdiA6IFt2XSk7XG4gICAgICAgICAgICBkZWxldGUgcHJvcHNba107XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuICRmaXJlYmFzZShyZWYsIHByb3BzKTtcbiAgICAgIH1cbiAgIH1dKTtcblxuIiwiJ3VzZSBzdHJpY3QnO1xuXG4oZnVuY3Rpb24gKCkge1xuXG4gICAgLyoqXG4gICAgICogQG5nSW5qZWN0XG4gICAgICovXG4gICAgYW5ndWxhci5tb2R1bGUoJ2FwcC5pbnRlcmNlcHRvcnMnKS5mYWN0b3J5KCdsb2dnaW5nSW50ZXJjZXB0b3InLCBmdW5jdGlvbiAoJHEsICRsb2cpIHtcblxuICAgICAgICBmdW5jdGlvbiBpc1BhcnRpYWwodXJsKSB7XG4gICAgICAgICAgICByZXR1cm4gdXJsLmluZGV4T2YoJ3BhcnRpYWxzJykgPT09IC0xO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICdyZXF1ZXN0JzogZnVuY3Rpb24gKGNvbmZpZykge1xuICAgICAgICAgICAgICAgIGlmIChpc1BhcnRpYWwoY29uZmlnLnVybCkpIHtcbiAgICAgICAgICAgICAgICAgICAgJGxvZy5kZWJ1ZygnSHR0cCBSZXF1ZXN0IFsnICsgY29uZmlnLm1ldGhvZCArICddWycgKyBjb25maWcudXJsICsgJ10nKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbmZpZztcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICdyZXF1ZXN0RXJyb3InOiBmdW5jdGlvbiAoY29uZmlnKSB7XG4gICAgICAgICAgICAgICAgJGxvZy5lcnJvcignSHR0cCBSZXF1ZXN0IEVycm9yIFsnICsgY29uZmlnLm1ldGhvZCArICddWycgKyBjb25maWcudXJsICsgJ10nKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gY29uZmlnO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgJ3Jlc3BvbnNlJzogZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgaWYgKGlzUGFydGlhbChyZXNwb25zZS5jb25maWcudXJsKSkge1xuICAgICAgICAgICAgICAgICAgICAkbG9nLmRlYnVnKCdIdHRwIFJlc3BvbnNlIFN1Y2Nlc3M6IFN0YXR1cyBbJyArIHJlc3BvbnNlLnN0YXR1cyArICddIHRvIFsnICsgcmVzcG9uc2UuY29uZmlnLm1ldGhvZCArICddWycgKyByZXNwb25zZS5jb25maWcudXJsICsgJ10nKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgJ3Jlc3BvbnNlRXJyb3InOiBmdW5jdGlvbiAocmVqZWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgJGxvZy5lcnJvcignSHR0cCBSZXNwb25zZSBFcnJvcjogU3RhdHVzIFsnICsgcmVqZWN0aW9uLnN0YXR1cyArICddIHRvIFsnICsgcmVqZWN0aW9uLmNvbmZpZy5tZXRob2QgKyAnXVsnICsgcmVqZWN0aW9uLmNvbmZpZy51cmwgKyAnXSBkYXRhIFsnICsgKHJlamVjdGlvbi5kYXRhLmVycm9yID8gcmVqZWN0aW9uLmRhdGEuZXJyb3IgOiByZWplY3Rpb24uZGF0YSkgKyAnXScpO1xuICAgICAgICAgICAgICAgIHJldHVybiAkcS5yZWplY3QocmVqZWN0aW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9KTtcblxuICAgIGFuZ3VsYXIubW9kdWxlKCdhcHAuaW50ZXJjZXB0b3JzJykuY29uZmlnKFsnJGh0dHBQcm92aWRlcicsIGZ1bmN0aW9uICgkaHR0cFByb3ZpZGVyKSB7XG4gICAgICAgICRodHRwUHJvdmlkZXIuaW50ZXJjZXB0b3JzLnB1c2goJ2xvZ2dpbmdJbnRlcmNlcHRvcicpO1xuICAgIH1dKTtcblxufSkoKTsiLCIndXNlIHN0cmljdCc7XG5cbihmdW5jdGlvbiAoKSB7XG4gICAgLyoqXG4gICAgICogQG5nSW5qZWN0XG4gICAgICovXG4gICAgdmFyIFVzZXJNb2RlbCA9IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBUaGUgdXNlclxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB1c2VyOiBudWxsXG4gICAgICAgIH07XG4gICAgfTtcblxuICAgIGFuZ3VsYXIubW9kdWxlKCdhcHAubW9kZWxzJykuZmFjdG9yeSgnVXNlck1vZGVsJywgVXNlck1vZGVsKTtcbn0pKCk7IiwiJ3VzZSBzdHJpY3QnO1xuXG4oZnVuY3Rpb24gKCkge1xuXG4gICAgLyoqXG4gICAgICogQG5nSW5qZWN0XG4gICAgICovXG4gICAgdmFyIE5vdGlmeVNlcnZpY2UgPSBmdW5jdGlvbiAobm90aWZ5KSB7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNob3cgYSBub3RpZmljYXRpb24gd2l0aCBzdHlsZSBEQU5HRVJcbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIG1lc3NhZ2UgdGhlIG1lc3NhZ2UgdG8gZGlzcGxheVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5kYW5nZXIgPSBmdW5jdGlvbiAobWVzc2FnZSkge1xuICAgICAgICAgICAgbm90aWZ5KHttZXNzYWdlOiBtZXNzYWdlLCBjbGFzc2VzOiAnYWxlcnQtZGFuZ2VyJ30pO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTaG93IGEgbm90aWZpY2F0aW9uIHdpdGggc3R5bGUgV0FSTklOR1xuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0gbWVzc2FnZSB0aGUgbWVzc2FnZSB0byBkaXNwbGF5XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLndhcm5pbmcgPSBmdW5jdGlvbiAobWVzc2FnZSkge1xuICAgICAgICAgICAgbm90aWZ5KHttZXNzYWdlOiBtZXNzYWdlLCBjbGFzc2VzOiAnYWxlcnQtd2FybmluZyd9KTtcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogU2hvdyBhIG5vdGlmaWNhdGlvbiB3aXRoIHN0eWxlIFNVQ0NFU1NcbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIG1lc3NhZ2UgdGhlIG1lc3NhZ2UgdG8gZGlzcGxheVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5zdWNjZXNzID0gZnVuY3Rpb24gKG1lc3NhZ2UpIHtcbiAgICAgICAgICAgIG5vdGlmeSh7bWVzc2FnZTogbWVzc2FnZSwgY2xhc3NlczogJ2FsZXJ0LXN1Y2Nlc3MnfSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNob3cgYSBub3RpZmljYXRpb24gd2l0aCBzdHlsZSBJTkZPXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSBtZXNzYWdlIHRoZSBtZXNzYWdlIHRvIGRpc3BsYXlcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuaW5mbyA9IGZ1bmN0aW9uIChtZXNzYWdlKSB7XG4gICAgICAgICAgICBub3RpZnkoe21lc3NhZ2U6IG1lc3NhZ2UsIGNsYXNzZXM6ICdhbGVydC1pbmZvJ30pO1xuICAgICAgICB9O1xuICAgIH07XG5cbiAgICBhbmd1bGFyXG4gICAgICAgIC5tb2R1bGUoJ2FwcC5ub3RpZnknKVxuICAgICAgICAuc2VydmljZSgnTm90aWZ5U2VydmljZScsIE5vdGlmeVNlcnZpY2UpO1xuXG59KSgpOyIsIid1c2Ugc3RyaWN0JztcblxuKGZ1bmN0aW9uICgpIHtcblxuICAgIC8qKlxuICAgICAqIEBuZ0luamVjdFxuICAgICAqL1xuICAgIHZhciBEYXRlU2VydmljZSA9IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIERhdGUgTk9XXG4gICAgICAgICAqXG4gICAgICAgICAqIEByZXR1cm5zIERhdGVcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMubm93ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBEYXRlKCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBEYXRlIE5PVyBpbiBzZWNvbmRzXG4gICAgICAgICAqXG4gICAgICAgICAqIEByZXR1cm5zIG51bWJlclxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5nZXRUaW1lID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubm93KCkuZ2V0VGltZSgpO1xuICAgICAgICB9O1xuICAgIH07XG5cbiAgICBhbmd1bGFyXG4gICAgICAgIC5tb2R1bGUoJ2FwcC5zZXJ2aWNlcycpXG4gICAgICAgIC5zZXJ2aWNlKCdEYXRlU2VydmljZScsIERhdGVTZXJ2aWNlKTtcblxufSkoKTsiLCIndXNlIHN0cmljdCc7XG5cbihmdW5jdGlvbiAoKSB7XG5cbiAgICAvKipcbiAgICAgKiBAbmdJbmplY3RcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBIb21lQ3RybCgkbG9nLCBOb3RpZnlTZXJ2aWNlLCBGaXJlYmFzZSwgJGZpcmViYXNlKSB7XG5cbiAgICAgICAgLy8gVmlld01vZGVsXG4gICAgICAgIHZhciB2bSA9IHRoaXM7XG5cbiAgICAgICAgdmFyIHJlZiA9IG5ldyBGaXJlYmFzZShcImh0dHBzOi8vYnVnLWZyZWUtZm9vZC5maXJlYmFzZWlvLmNvbS9cIik7XG4gICAgICAgIC8vIGNyZWF0ZSBhbiBBbmd1bGFyRmlyZSByZWZlcmVuY2UgdG8gdGhlIGRhdGFcbiAgICAgICAgdmFyIHN5bmMgPSAkZmlyZWJhc2UocmVmKTtcbiAgICAgICAgLy8gZG93bmxvYWQgdGhlIGRhdGEgaW50byBhIGxvY2FsIG9iamVjdFxuICAgICAgICB2bS5kYXRhID0gc3luYy4kYXNPYmplY3QoKTtcblxuICAgIH1cblxuICAgIGFuZ3VsYXJcbiAgICAgICAgLm1vZHVsZSgnYXBwLmNvbnRyb2xsZXJzLmhvbWUnKVxuICAgICAgICAuY29udHJvbGxlcignSG9tZUN0cmwnLCBIb21lQ3RybCk7XG5cbn0pKCk7IiwiJ3VzZSBzdHJpY3QnO1xuXG4oZnVuY3Rpb24gKCkge1xuXG4gICAgLyoqXG4gICAgICogQG5nSW5qZWN0XG4gICAgICovXG4gICAgZnVuY3Rpb24gQ3JlYXRlTWVudUN0cmwoJGxvZywgTm90aWZ5U2VydmljZSwgRmlyZWJhc2UsICRmaXJlYmFzZSkge1xuXG4gICAgICAgIC8vIFZpZXdNb2RlbFxuICAgICAgICB2YXIgdm0gPSB0aGlzO1xuXG4gICAgICAgIC8vIHJlc3RhdXJhbnRzUmVmXG4gICAgICAgIHZhciByZXN0YXVyYW50c1JlZiA9IG5ldyBGaXJlYmFzZShcImh0dHBzOi8vYnVnLWZyZWUtZm9vZC5maXJlYmFzZWlvLmNvbS9yZXN0YXVyYW50c1wiKTtcbiAgICAgICAgdmFyIHJlc3RhdXJhbnRzU3luYyA9ICRmaXJlYmFzZShyZXN0YXVyYW50c1JlZik7XG5cbiAgICAgICAgdm0ucmVzdGF1cmFudHMgPSByZXN0YXVyYW50c1N5bmMuJGFzQXJyYXkoKTtcbiAgICAgICAgY29uc29sZS5sb2codm0ucmVzdGF1cmFudHMpO1xuXG4gICAgICAgIC8vIG1lbnVSZWZcbiAgICAgICAgdmFyIG1lbnVSZWYgPSBuZXcgRmlyZWJhc2UoXCJodHRwczovL2J1Zy1mcmVlLWZvb2QuZmlyZWJhc2Vpby5jb20vbWVudXNcIik7XG4gICAgICAgIHZhciBtZW51U3luYyA9ICRmaXJlYmFzZShtZW51UmVmKTtcblxuICAgICAgICB2bS5tZW51cyA9IG1lbnVTeW5jLiRhc0FycmF5KCk7XG4gICAgICAgIGNvbnNvbGUubG9nKHZtLm1lbnVzKTtcblxuICAgICAgICB2bS5zZWxlY3RlZFJlc3RhdXJhbnQgPSB7fTtcbiAgICAgICAgdm0ubmV3TWVudSA9IHtcbiAgICAgICAgICAgIG5hbWU6ICcnLFxuICAgICAgICAgICAgZm9vZHM6IFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6ICcnLCBwcmljZTogMFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBjcmVhdGVkRGF0ZTogRGF0ZS5ub3coKVxuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMuY3JlYXRlTWVudSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdBZGRpbmcgbmV3IG1lbnUgWyVzXScsIGFuZ3VsYXIudG9Kc29uKHZtLm5ld01lbnUpKTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHZtLnNlbGVjdGVkUmVzdGF1cmFudCk7XG5cbiAgICAgICAgICAgIGlmICghdm0uc2VsZWN0ZWRSZXN0YXVyYW50Lm1lbnVzKSB7XG4gICAgICAgICAgICAgICAgdm0uc2VsZWN0ZWRSZXN0YXVyYW50Lm1lbnVzID0gW107XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2bS5zZWxlY3RlZFJlc3RhdXJhbnQubWVudXMucHVzaCh2bS5uZXdNZW51KTtcblxuICAgICAgICAgICAgdm0ucmVzdGF1cmFudHMuJHNhdmUodm0uc2VsZWN0ZWRSZXN0YXVyYW50KTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHZtLnJlc3RhdXJhbnRzKTtcblxuICAgICAgICAgICAgdm0ubmV3TWVudSA9IHtcbiAgICAgICAgICAgICAgICBuYW1lOiAnJyxcbiAgICAgICAgICAgICAgICBmb29kczogW1xuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAnJywgcHJpY2U6IDBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgY3JlYXRlZERhdGU6IERhdGUubm93KClcbiAgICAgICAgICAgIH07XG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5yZW1vdmVGb29kID0gZnVuY3Rpb24gKGZvb2QsIGluZGV4KSB7XG4gICAgICAgICAgICB2bS5uZXdNZW51LmZvb2RzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5hZGRGb29kID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdm0ubmV3TWVudS5mb29kcy5wdXNoKHtcbiAgICAgICAgICAgICAgICBuYW1lOiAnJywgcHJpY2U6IDBcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuXG4vLyAgICAgICAgU21hbGwgQ2hpY2tlbiBOYWFuXHTCozMuODBcbi8vICAgICAgICBTbWFsbCBDaGlja2VuIENoYXBhdHRpXHTCozMuODBcbi8vICAgICAgICBDaGlja2VuIExhbWIgTWl4IE5hYW5cdMKjNi4wMFxuLy8gICAgICAgIENoaWNrZW4gTGFtYiBNaXggQ2hhcGF0dGlcdMKjNi4wMFxuLy8gICAgICAgIExhcmdlIENoaWNrZW4gTmFhblx0wqM2LjAwXG4vLyAgICAgICAgTGFyZ2UgQ2hpY2tlbiBDaGFwYXR0aVx0wqM2LjAwXG4vLyAgICAgICAgTGFyZ2UgTGFtYiBOYWFuXHTCozYuMDBcbi8vICAgICAgICBMYXJnZSBMYW1iIENoYXBhdHRpXHTCozYuMDBcbi8vICAgICAgICBDaGlja2VuIFNlZWtoIE1peCBOYWFuXHTCozYuMDBcbi8vICAgICAgICBDaGlja2VuIFNlZWtoIE1peCBDaGFwYXR0aVx0wqM2LjAwXG4vLyAgICAgICAgU21hbGwgU2Vla2ggTmFhblx0wqMyLjkwXG4vLyAgICAgICAgU21hbGwgU2Vla2ggQ2hhcGF0dGlcdMKjMi45MFxuLy8gICAgICAgIExhcmdlIFNlZWtoIE5hYW5cdMKjMy43MFxuLy8gICAgICAgIExhcmdlIFNlZWtoIENoYXBhdHRpXHTCozMuNzBcbi8vICAgICAgICBTbWFsbCBDaGlwc1x0wqMxLjMwXG4vLyAgICAgICAgTGFyZ2UgQ2hpcHNcdMKjMi4wMFxuLy8gICAgICAgIENoaWNrZW4gRG9ubmVyXHTCozMuNTBcblxuXG4gICAgfVxuXG4gICAgYW5ndWxhclxuICAgICAgICAubW9kdWxlKCdhcHAuY29udHJvbGxlcnMubWVudXMnKVxuICAgICAgICAuY29udHJvbGxlcignQ3JlYXRlTWVudUN0cmwnLCBDcmVhdGVNZW51Q3RybCk7XG5cbn0pKCk7IiwiJ3VzZSBzdHJpY3QnO1xuXG4oZnVuY3Rpb24gKCkge1xuXG4gICAgLyoqXG4gICAgICogQG5nSW5qZWN0XG4gICAgICovXG4gICAgZnVuY3Rpb24gTGlzdE1lbnVzQ3RybCgkbG9nLCBOb3RpZnlTZXJ2aWNlLCBGaXJlYmFzZSwgJGZpcmViYXNlKSB7XG5cbiAgICAgICAgLy8gVmlld01vZGVsXG4gICAgICAgIHZhciB2bSA9IHRoaXM7XG5cbiAgICAgICAgdmFyIHJlZiA9IG5ldyBGaXJlYmFzZShcImh0dHBzOi8vYnVnLWZyZWUtZm9vZC5maXJlYmFzZWlvLmNvbS9yZXN0YXVyYW50c1wiKTtcbiAgICAgICAgdmFyIHN5bmMgPSAkZmlyZWJhc2UocmVmKTtcblxuICAgICAgICB2bS5yZXN0YXVyYW50cyA9IHN5bmMuJGFzQXJyYXkoKTtcblxuICAgICAgICBjb25zb2xlLmxvZyh2bS5yZXN0YXVyYW50cyk7XG5cbiAgICAgICAgdGhpcy5yZW1vdmVNZW51QXRJbmRleCA9IGZ1bmN0aW9uIChyZXN0dXJhbnQsIGluZGV4KSB7XG4gICAgICAgICAgICByZXN0dXJhbnQubWVudXMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICAgIHZtLnJlc3RhdXJhbnRzLiRzYXZlKHJlc3R1cmFudCk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgYW5ndWxhclxuICAgICAgICAubW9kdWxlKCdhcHAuY29udHJvbGxlcnMubWVudXMnKVxuICAgICAgICAuY29udHJvbGxlcignTGlzdE1lbnVzQ3RybCcsIExpc3RNZW51c0N0cmwpO1xuXG59KSgpOyIsIid1c2Ugc3RyaWN0JztcblxuKGZ1bmN0aW9uICgpIHtcblxuICAgIC8qKlxuICAgICAqIEBuZ0luamVjdFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIFRvcE5hdkN0cmwoJGxvZywgTm90aWZ5U2VydmljZSwgJGZpcmViYXNlU2ltcGxlTG9naW4sIEZpcmViYXNlLCBVc2VyTW9kZWwpIHtcblxuICAgICAgICAvLyBWaWV3TW9kZWxcbiAgICAgICAgdmFyIHZtID0gdGhpcztcblxuICAgICAgICB2YXIgcmVmID0gbmV3IEZpcmViYXNlKFwiaHR0cHM6Ly9idWctZnJlZS1mb29kLmZpcmViYXNlaW8uY29tXCIpO1xuXG4gICAgICAgIHZtLnVzZXJNb2RlbCA9IFVzZXJNb2RlbDtcblxuICAgICAgICB2YXIgYXV0aENsaWVudCA9ICRmaXJlYmFzZVNpbXBsZUxvZ2luKHJlZik7XG4gICAgICAgIGNvbnNvbGUubG9nKGF1dGhDbGllbnQpO1xuXG4gICAgICAgIC8vIFRPRE8gbW92ZSB0byByZXNvbHZlIVxuICAgICAgICB0aGlzLmluaXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBhdXRoQ2xpZW50LiRnZXRDdXJyZW50VXNlcigpLnRoZW4oaGFuZGxlU3VjY2Vzc2Z1bExvZ2luKTtcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLmxvZ2luID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgJGxvZy5kZWJ1ZygnTG9naW4gLSBnaXRodWInKTtcbiAgICAgICAgICAgIGF1dGhDbGllbnQuJGxvZ2luKCdnaXRodWInLCB7IHJlbWVtYmVyTWU6IHRydWUsIHNjb3BlOiAndXNlcid9KVxuICAgICAgICAgICAgICAgIC50aGVuKGhhbmRsZVN1Y2Nlc3NmdWxMb2dpbiwgcG9wRXJyb3IpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMubG9nb3V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgJGxvZy5kZWJ1ZygnTG9nb3V0Jyk7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhhdXRoQ2xpZW50KTtcbiAgICAgICAgICAgIGF1dGhDbGllbnQuJGxvZ291dCgpO1xuICAgICAgICAgICAgVXNlck1vZGVsLnVzZXIgPSBudWxsO1xuICAgICAgICAgICAgTm90aWZ5U2VydmljZS5zdWNjZXNzKCd1c2VyIGlzIGxvZ2dlZCBvdXQnKTtcbiAgICAgICAgfTtcblxuICAgICAgICBmdW5jdGlvbiBoYW5kbGVTdWNjZXNzZnVsTG9naW4odXNlcikge1xuICAgICAgICAgICAgaWYgKHVzZXIpIHtcbiAgICAgICAgICAgICAgICBVc2VyTW9kZWwudXNlciA9IHVzZXI7XG4gICAgICAgICAgICAgICAgJGxvZy5kZWJ1ZyhcIlVzZXIgSUQ6IFwiICsgdXNlci51aWQgKyBcIiwgUHJvdmlkZXI6IFwiICsgdXNlci5wcm92aWRlcik7XG4gICAgICAgICAgICAgICAgTm90aWZ5U2VydmljZS5zdWNjZXNzKFwiVXNlciBJRDogXCIgKyB1c2VyLnVpZCArIFwiLCBQcm92aWRlcjogXCIgKyB1c2VyLnByb3ZpZGVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHBvcEVycm9yKGVycm9yKSB7XG4gICAgICAgICAgICAkbG9nLmVycm9yKGVycm9yKTtcbiAgICAgICAgICAgIE5vdGlmeVNlcnZpY2UuZGFuZ2VyKGVycm9yKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGFuZ3VsYXJcbiAgICAgICAgLm1vZHVsZSgnYXBwLmNvbnRyb2xsZXJzLm5hdmlnYXRpb24nKVxuICAgICAgICAuY29udHJvbGxlcignVG9wTmF2Q3RybCcsIFRvcE5hdkN0cmwpO1xuXG59KSgpOyIsIid1c2Ugc3RyaWN0JztcblxuKGZ1bmN0aW9uICgpIHtcblxuICAgIC8qKlxuICAgICAqIEBuZ0luamVjdFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIE9yZGVyc0N0cmwoJGxvZywgZmJ1dGlsLCBOb3RpZnlTZXJ2aWNlLCBVc2VyTW9kZWwpIHtcblxuICAgICAgICAvLyBWaWV3TW9kZWxcbiAgICAgICAgdmFyIHZtID0gdGhpcztcblxuICAgICAgICB2bS5vcmRlcnMgPSBmYnV0aWwuc3luY0FycmF5KCdvcmRlcnMnKTtcblxuICAgICAgICB2bS51c2VyTW9kZWwgPSBVc2VyTW9kZWw7XG5cbiAgICAgICAgcmVzZXRGb3JtKCk7XG5cbiAgICAgICAgLy8gVXNlcnNcbiAgICAgICAgdm0uYXZhaWxhYmxlVXNlcnMgPSBbJ0phbWVzIE1vcmdhbicsICdBbmR5IEdyYXknLCAnU2ltb24gU291dGVyJywgJ0FsZXggTGFzaGZvcmQnXTtcblxuICAgICAgICAvLyBBdmFpbGFibGUgcGFnZSBjb25maWd1cmF0aW9uXG4gICAgICAgIHZtLmF2YWlsYWJsZVJlc3RhdXJhbnRzID0gW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6ICdBYmR1bHMgTGV2ZW5zaHVsbWUnLFxuICAgICAgICAgICAgICAgIG9wZW5pbmdUaW1lczogJy4uLicsXG4gICAgICAgICAgICAgICAgZm9vZHM6IFtcbiAgICAgICAgICAgICAgICAgICAge25hbWU6ICdTbWFsbCBDaGlja2VuIE5hYW4nLCBwcmljZTogMzgwfSxcbiAgICAgICAgICAgICAgICAgICAge25hbWU6ICdTbWFsbCBDaGlja2VuIENoYXBhdHRpJywgcHJpY2U6IDMwMH0sXG4gICAgICAgICAgICAgICAgICAgIHtuYW1lOiAnQ2hpY2tlbiBMYW1iIE1peCBOYWFuJywgcHJpY2U6IDYwMH0sXG4gICAgICAgICAgICAgICAgICAgIHtuYW1lOiAnQ2hpY2tlbiBMYW1iIE1peCBDaGFwYXR0aScsIHByaWNlOiA2MDB9LFxuICAgICAgICAgICAgICAgICAgICB7bmFtZTogJ0xhcmdlIENoaWNrZW4gTmFhbicsIHByaWNlOiA2MDB9LFxuICAgICAgICAgICAgICAgICAgICB7bmFtZTogJ0xhcmdlIENoaWNrZW4gQ2hhcGF0dGknLCBwcmljZTogNjAwfSxcbiAgICAgICAgICAgICAgICAgICAge25hbWU6ICdMYXJnZSBMYW1iIE5hYW4nLCBwcmljZTogNjAwfSxcbiAgICAgICAgICAgICAgICAgICAge25hbWU6ICdMYXJnZSBMYW1iIENoYXBhdHRpJywgcHJpY2U6IDYwMH0sXG4gICAgICAgICAgICAgICAgICAgIHtuYW1lOiAnQ2hpY2tlbiBTZWVraCBNaXggTmFhbicsIHByaWNlOiA2MDB9LFxuICAgICAgICAgICAgICAgICAgICB7bmFtZTogJ1NtYWxsIFNlZWtoIE5hYW4nLCBwcmljZTogMjkwfSxcbiAgICAgICAgICAgICAgICAgICAge25hbWU6ICdTbWFsbCBTZWVraCBDaGFwYXR0aScsIHByaWNlOiAyOTB9LFxuICAgICAgICAgICAgICAgICAgICB7bmFtZTogJ0xhcmdlIFNlZWtoIE5hYW4nLCBwcmljZTogMzcwfSxcbiAgICAgICAgICAgICAgICAgICAge25hbWU6ICdMYXJnZSBTZWVraCBDaGFwYXR0aScsIHByaWNlOiAzNzB9LFxuICAgICAgICAgICAgICAgICAgICB7bmFtZTogJ1NtYWxsIENoaXBzJywgcHJpY2U6IDEzMH0sXG4gICAgICAgICAgICAgICAgICAgIHtuYW1lOiAnTGFyZ2UgQ2hpcHMnLCBwcmljZTogMjAwfSxcbiAgICAgICAgICAgICAgICAgICAge25hbWU6ICdDaGlja2VuIERvbm5lcicsIHByaWNlOiAzNTB9XG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgfVxuICAgICAgICBdO1xuXG4gICAgICAgIHRoaXMuY3JlYXRlT3JkZXIgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgIC8vIFNldCB0aGUgdXNlclxuICAgICAgICAgICAgdm0ubmV3T3JkZXIuY3JlYXRlZEJ5ID0gVXNlck1vZGVsLnVzZXI7XG5cbiAgICAgICAgICAgIHZtLm9yZGVycy4kYWRkKGFuZ3VsYXIuY29weSh2bS5uZXdPcmRlcikpXG4gICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBOb3RpZnlTZXJ2aWNlLnN1Y2Nlc3MoJ1N1Y2Nlc3NmdWxseSBhZGRlZCBvcmRlcicpO1xuICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgTm90aWZ5U2VydmljZS5kYW5nZXIoJ1VuYWJsZSB0byBzYXZlIG9yZGVyJyk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXNldEZvcm0oKTtcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLnJlbW92ZU9yZGVyID0gZnVuY3Rpb24gKG9yZGVyKSB7XG4gICAgICAgICAgICB2bS5vcmRlcnMuJHJlbW92ZShvcmRlcilcbiAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIE5vdGlmeVNlcnZpY2Uuc3VjY2VzcygnU3VjY2Vzc2Z1bGx5IHJlbW92ZWQgb3JkZXInKTtcbiAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIE5vdGlmeVNlcnZpY2UuZGFuZ2VyKCdVbmFibGUgdG8gcmVtb3ZlIG9yZGVyJyk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgZnVuY3Rpb24gcmVzZXRGb3JtKCkge1xuICAgICAgICAgICAgdm0ubmV3T3JkZXIgPSB7XG4gICAgICAgICAgICAgICAgY3JlYXRlZEJ5OiBVc2VyTW9kZWwudXNlcixcbiAgICAgICAgICAgICAgICBuYW1lOiAnJyxcbiAgICAgICAgICAgICAgICByZXN0YXVyYW50OiAnJyxcbiAgICAgICAgICAgICAgICBjb250ZW50OiBbXG4gICAgICAgICAgICAgICAgICAgIHt9XG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICBjcmVhdGVkRGF0ZTogRGF0ZS5ub3coKVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGFuZ3VsYXJcbiAgICAgICAgLm1vZHVsZSgnYXBwLmNvbnRyb2xsZXJzLm9yZGVycycpXG4gICAgICAgIC5jb250cm9sbGVyKCdPcmRlcnNDdHJsJywgT3JkZXJzQ3RybCk7XG5cbn0pKCk7IiwiJ3VzZSBzdHJpY3QnO1xuXG4oZnVuY3Rpb24gKCkge1xuXG4gICAgLyoqXG4gICAgICogQG5nSW5qZWN0XG4gICAgICovXG4gICAgZnVuY3Rpb24gQ3JlYXRlUmVzdGF1cmFudEN0cmwoJGxvZywgTm90aWZ5U2VydmljZSwgRmlyZWJhc2UsICRmaXJlYmFzZSkge1xuXG4gICAgICAgIC8vIFZpZXdNb2RlbFxuICAgICAgICB2YXIgdm0gPSB0aGlzO1xuXG4gICAgICAgIHZhciByZWYgPSBuZXcgRmlyZWJhc2UoXCJodHRwczovL2J1Zy1mcmVlLWZvb2QuZmlyZWJhc2Vpby5jb20vcmVzdGF1cmFudHNcIik7XG4gICAgICAgIHZhciBzeW5jID0gJGZpcmViYXNlKHJlZik7XG5cbiAgICAgICAgdm0ucmVzdHVyYW50cyA9IHN5bmMuJGFzQXJyYXkoKTtcbiAgICAgICAgY29uc29sZS5sb2codm0ucmVzdHVyYW50cyk7XG5cbiAgICAgICAgdm0ubmV3UmVzdGF1cmFudCA9IHtcbiAgICAgICAgICAgIG5hbWU6ICcnLFxuICAgICAgICAgICAgY3JlYXRlZERhdGU6IERhdGUubm93KCksXG4gICAgICAgICAgICBtZW51czogW11cbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLmFkZFJlc3RhdXJhbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAkbG9nLmRlYnVnKCdBZGRpbmcgbmV3IHJlc3RhdXJhbnRzIFslc10nLCB2bS5uZXdSZXN0YXVyYW50KTtcblxuICAgICAgICAgICAgdm0ucmVzdHVyYW50cy4kYWRkKGFuZ3VsYXIuY29weSh2bS5uZXdSZXN0YXVyYW50KSk7XG5cbiAgICAgICAgICAgIHZtLm5ld1Jlc3RhdXJhbnQgPSB7XG4gICAgICAgICAgICAgICAgbmFtZTogJycsXG4gICAgICAgICAgICAgICAgY3JlYXRlZERhdGU6IERhdGUubm93KCksXG4gICAgICAgICAgICAgICAgbWVudXM6IFtdXG4gICAgICAgICAgICB9O1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGFuZ3VsYXJcbiAgICAgICAgLm1vZHVsZSgnYXBwLmNvbnRyb2xsZXJzLnJlc3RhdXJhbnQnKVxuICAgICAgICAuY29udHJvbGxlcignQ3JlYXRlUmVzdGF1cmFudEN0cmwnLCBDcmVhdGVSZXN0YXVyYW50Q3RybCk7XG5cbn0pKCk7IiwiJ3VzZSBzdHJpY3QnO1xuXG4oZnVuY3Rpb24gKCkge1xuXG4gICAgLyoqXG4gICAgICogQG5nSW5qZWN0XG4gICAgICovXG4gICAgZnVuY3Rpb24gTGlzdFJlc3RhdXJhbnRDdHJsKCRsb2csIE5vdGlmeVNlcnZpY2UsIEZpcmViYXNlLCAkZmlyZWJhc2UpIHtcblxuICAgICAgICAvLyBWaWV3TW9kZWxcbiAgICAgICAgdmFyIHZtID0gdGhpcztcblxuICAgICAgICB2YXIgcmVmID0gbmV3IEZpcmViYXNlKFwiaHR0cHM6Ly9idWctZnJlZS1mb29kLmZpcmViYXNlaW8uY29tL3Jlc3RhdXJhbnRzXCIpO1xuICAgICAgICB2YXIgc3luYyA9ICRmaXJlYmFzZShyZWYpO1xuXG4gICAgICAgIHZtLnJlc3RhdXJhbnRzID0gc3luYy4kYXNBcnJheSgpO1xuXG4gICAgfVxuXG4gICAgYW5ndWxhclxuICAgICAgICAubW9kdWxlKCdhcHAuY29udHJvbGxlcnMucmVzdGF1cmFudCcpXG4gICAgICAgIC5jb250cm9sbGVyKCdMaXN0UmVzdGF1cmFudEN0cmwnLCBMaXN0UmVzdGF1cmFudEN0cmwpO1xuXG59KSgpOyIsIid1c2Ugc3RyaWN0JztcblxuKGZ1bmN0aW9uICgpIHtcblxuICAgIC8qKlxuICAgICAqIEBuZ0luamVjdFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIFBsYWNlT3JkZXJDdHJsKCRsb2csIE5vdGlmeVNlcnZpY2UsICRyb3V0ZVBhcmFtcywgZmJ1dGlsLCBVc2VyTW9kZWwpIHtcblxuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICAgICAgLy8gVmlld01vZGVsXG4gICAgICAgIHZhciB2bSA9IHRoaXM7XG5cbiAgICAgICAgdm0udXNlck1vZGVsID0gVXNlck1vZGVsO1xuXG4gICAgICAgIHZtLnNlbGVjdGVkT3JkZXIgPSBmYnV0aWwuc3luY09iamVjdChbJ29yZGVycy8nLCAkcm91dGVQYXJhbXMub3JkZXJJZF0pO1xuXG4gICAgICAgIHZtLnNlbGVjdGVkT3JkZXIuJGxvYWRlZCgpXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdm0udXBkYXRlUGFnZVRvdGFscygpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgdm0udG90YWxDb3VudHMgPSB7fTtcblxuICAgICAgICB0aGlzLmdldE9yZGVyVG90YWxzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKCF2bS5zZWxlY3RlZE9yZGVyIHx8ICF2bS5zZWxlY3RlZE9yZGVyLmRldGFpbHMgfHwgdm0uc2VsZWN0ZWRPcmRlci5kZXRhaWxzLmxlbmd0aCA8PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgdG90YWwgPSAwO1xuICAgICAgICAgICAgdm0uc2VsZWN0ZWRPcmRlci5kZXRhaWxzLmZvckVhY2goZnVuY3Rpb24gKGRldGFpbCkge1xuICAgICAgICAgICAgICAgIGlmIChkZXRhaWwub3JkZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgZGV0YWlsLm9yZGVyLmZvckVhY2goZnVuY3Rpb24gKG9yZGVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0b3RhbCArPSBvcmRlci5wcmljZTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gKHRvdGFsIC8gMTAwKS50b0ZpeGVkKDIpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMudXBkYXRlUGFnZVRvdGFscyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICghdm0uc2VsZWN0ZWRPcmRlciB8fCAhdm0uc2VsZWN0ZWRPcmRlci5kZXRhaWxzIHx8IHZtLnNlbGVjdGVkT3JkZXIuZGV0YWlscy5sZW5ndGggPD0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdm0udG90YWxDb3VudHMgPSB7fTtcbiAgICAgICAgICAgIHZtLnNlbGVjdGVkT3JkZXIuZGV0YWlscy5mb3JFYWNoKGZ1bmN0aW9uIChkZXRhaWwpIHtcbiAgICAgICAgICAgICAgICBpZiAoZGV0YWlsLm9yZGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIGRldGFpbC5vcmRlci5mb3JFYWNoKGZ1bmN0aW9uIChvcmRlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF2bS50b3RhbENvdW50c1tvcmRlci5uYW1lXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZtLnRvdGFsQ291bnRzW29yZGVyLm5hbWVdID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBvcmRlci5uYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmljZTogb3JkZXIucHJpY2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvdW50OiAxXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdm0udG90YWxDb3VudHNbb3JkZXIubmFtZV0uY291bnQrKztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgdm0udXBkYXRlUGFnZVRvdGFscygpO1xuICAgIH1cblxuICAgIGFuZ3VsYXJcbiAgICAgICAgLm1vZHVsZSgnYXBwLmNvbnRyb2xsZXJzLm9yZGVyLXdpemFyZCcpXG4gICAgICAgIC5jb250cm9sbGVyKCdQbGFjZU9yZGVyQ3RybCcsIFBsYWNlT3JkZXJDdHJsKTtcblxufSkoKTsiLCIndXNlIHN0cmljdCc7XG5cbihmdW5jdGlvbiAoKSB7XG5cbiAgICAvKipcbiAgICAgKiBAbmdJbmplY3RcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBXaXphcmRDdHJsKCRsb2csIE5vdGlmeVNlcnZpY2UsIGZidXRpbCwgVXNlck1vZGVsKSB7XG5cbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgICAgIC8vIFZpZXdNb2RlbFxuICAgICAgICB2YXIgdm0gPSB0aGlzO1xuXG4gICAgICAgIHZtLnVzZXJNb2RlbCA9IFVzZXJNb2RlbDtcblxuICAgICAgICB2bS5vcmRlcnMgPSBmYnV0aWwuc3luY0FycmF5KCdvcmRlcnMnKTtcblxuICAgICAgICB2bS5zZWxlY3RlZE9yZGVyID0gdW5kZWZpbmVkO1xuXG4gICAgICAgIHZtLm5ld09yZGVySXRlbUZvcm0gPSB1bmRlZmluZWQ7XG5cbiAgICAgICAgLy8gVGhlIGRhdGEgZm9ybVxuICAgICAgICB2bS5teU9yZGVyID0ge1xuICAgICAgICAgICAgZm9vZHM6IFtdXG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5pbml0T3JkZXJGb3JVc2VyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIG9yZGVyRGV0YWlsID0ge1xuICAgICAgICAgICAgICAgIHVzZXI6IFVzZXJNb2RlbC51c2VyLFxuICAgICAgICAgICAgICAgIG9yZGVyOiBbXVxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgaWYgKGhhc09yZGVyV2l0aERldGFpbHMoKSkge1xuICAgICAgICAgICAgICAgIHZtLnNlbGVjdGVkT3JkZXIuZGV0YWlscy5wdXNoKG9yZGVyRGV0YWlsKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdm0uc2VsZWN0ZWRPcmRlci5kZXRhaWxzID0gW29yZGVyRGV0YWlsXVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMudXNlckhhc09yZGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKCFoYXNPcmRlcldpdGhEZXRhaWxzKCkgfHwgIVVzZXJNb2RlbC51c2VyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gdm0uc2VsZWN0ZWRPcmRlci5kZXRhaWxzLnNvbWUoZnVuY3Rpb24gKGRldGFpbCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBkZXRhaWwudXNlci5pZCA9PT0gVXNlck1vZGVsLnVzZXIuaWRcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5maW5kVXNlck9yZGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHVzZXJEZXRhaWxzID0gdm0uc2VsZWN0ZWRPcmRlci5kZXRhaWxzLmZpbHRlcihmdW5jdGlvbiAoZGV0YWlsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRldGFpbC51c2VyLmlkID09PSBVc2VyTW9kZWwudXNlci5pZFxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGlmICh1c2VyRGV0YWlscy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1VzZXIgbm90IGZvdW5kIGluIG9yZGVyIScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHVzZXJEZXRhaWxzWzBdO1xuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMuYWRkRm9vZEl0ZW0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgdXNlck9yZGVyID0gdGhpcy5maW5kVXNlck9yZGVyKCk7XG5cbiAgICAgICAgICAgIGlmICghdXNlck9yZGVyLm9yZGVyKSB7XG4gICAgICAgICAgICAgICAgdXNlck9yZGVyLm9yZGVyID0gW107XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB1c2VyT3JkZXIub3JkZXIucHVzaCh2bS5uZXdPcmRlckl0ZW1Gb3JtKTtcbiAgICAgICAgICAgIHZtLm9yZGVycy4kc2F2ZSh2bS5zZWxlY3RlZE9yZGVyKVxuICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgTm90aWZ5U2VydmljZS5zdWNjZXNzKCdBZGRlZCAnICsgdXNlck9yZGVyLm9yZGVyW3VzZXJPcmRlci5vcmRlci5sZW5ndGggLSAxXS5uYW1lICsgJyB0byB0aGUgb3JkZXIhJyk7XG4gICAgICAgICAgICAgICAgICAgIHZtLm5ld09yZGVySXRlbUZvcm0gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYudXBkYXRlUGFnZVRvdGFscygpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMucmVtb3ZlRm9vZEl0ZW0gPSBmdW5jdGlvbiAoaW5kZXgsIGl0ZW0pIHtcbiAgICAgICAgICAgIHRoaXMuZmluZFVzZXJPcmRlcigpLm9yZGVyLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgICAgICB2bS5vcmRlcnMuJHNhdmUodm0uc2VsZWN0ZWRPcmRlcilcbiAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIE5vdGlmeVNlcnZpY2Uuc3VjY2VzcygnUmVtb3ZlZCAnICsgaXRlbS5uYW1lICsgJyBmcm9tIHRoZSBvcmRlciEnKTtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi51cGRhdGVQYWdlVG90YWxzKCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5nZXRVc2Vyc09yZGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKCFoYXNPcmRlcldpdGhEZXRhaWxzKCkgfHwgdm0uc2VsZWN0ZWRPcmRlci5kZXRhaWxzLmxlbmd0aCA8PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgdG90YWwgPSAwO1xuICAgICAgICAgICAgKHZtLmZpbmRVc2VyT3JkZXIoKS5vcmRlciB8fCBbXSkuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICAgICAgICAgIHRvdGFsICs9IGl0ZW0ucHJpY2U7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiAodG90YWwgLyAxMDApLnRvRml4ZWQoMik7XG4gICAgICAgIH07XG5cbiAgICAgICAgZnVuY3Rpb24gaGFzT3JkZXJXaXRoRGV0YWlscygpIHtcbiAgICAgICAgICAgIHJldHVybiB2bS5zZWxlY3RlZE9yZGVyICYmIHZtLnNlbGVjdGVkT3JkZXIuZGV0YWlscztcbiAgICAgICAgfVxuXG4gICAgfVxuXG4gICAgYW5ndWxhclxuICAgICAgICAubW9kdWxlKCdhcHAuY29udHJvbGxlcnMub3JkZXItd2l6YXJkJylcbiAgICAgICAgLmNvbnRyb2xsZXIoJ1dpemFyZEN0cmwnLCBXaXphcmRDdHJsKTtcblxufSkoKTsiXSwic291cmNlUm9vdCI6ImFwcCJ9