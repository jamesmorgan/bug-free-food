"use strict";!function(){var requires=["ngRoute","firebase","app.controllers","app.services","app.filters","app.directives","app.models","app.routes","app.interceptors","app.notify"];angular.module("app",requires)}(),function(){angular.module("app.controllers",["app.controllers.home","app.controllers.menus","app.controllers.orders","app.controllers.restaurant","app.controllers.wizard","app.controllers.navigation"])}(),function(){angular.module("app.directives",[])}(),function(){angular.module("app.filters",[])}(),function(){angular.module("app.interceptors",[])}(),function(){angular.module("app.models",[])}(),function(){angular.module("app.notify",["cgNotify"]),angular.module("app.notify").run(["notify",function(notify){notify.config({duration:2e3,templateUrl:"/www-build/views/templates/angular-notify.html"})}])}(),function(){angular.module("app.services",[])}(),function(){angular.module("app.controllers.home",[])}(),function(){angular.module("app.controllers.menus",[])}(),function(){angular.module("app.controllers.navigation",[])}(),function(){angular.module("app.controllers.orders",[])}(),function(){angular.module("app.controllers.restaurant",[])}(),function(){angular.module("app.controllers.wizard",[])}(),function(){angular.module("app").constant("version","0.0.1")}(),function(){var Routes=["$routeProvider","$locationProvider",function($routeProvider,$locationProvider){$routeProvider.when("/",{templateUrl:"/www-build/views/partials/home/index.html",controller:"HomeCtrl as hc"}),$routeProvider.when("/orders/list",{templateUrl:"/www-build/views/partials/orders/orders.html",controller:"OrdersCtrl as vm"}),$routeProvider.when("/menus/list",{templateUrl:"/www-build/views/partials/menus/menus.html",controller:"ListMenusCtrl as lmc"}),$routeProvider.when("/menus/create",{templateUrl:"/www-build/views/partials/menus/create.html",controller:"CreateMenuCtrl as cmc"}),$routeProvider.when("/restaurants/list",{templateUrl:"/www-build/views/partials/restaurant/restaurant.html",controller:"ListRestaurantCtrl as lrc"}),$routeProvider.when("/restaurants/create",{templateUrl:"/www-build/views/partials/restaurant/create.html",controller:"CreateRestaurantCtrl as crc"}),$routeProvider.when("/wizard/new-order",{templateUrl:"/www-build/views/partials/wizard/new-order.html",controller:"WizardCtrl as vm"}),$routeProvider.otherwise({redirectTo:"/"}),$locationProvider.html5Mode(!1)}];Routes.$inject=["$routeProvider","$locationProvider"],angular.module("app.routes",[]).config(Routes)}(),function(){function AppCtrl($log,$rootScope,NotifyService){$rootScope.$on("$routeChangeError",function(event,current,previous,rejection){var message="Failed to change route ["+(rejection.data.error?rejection.data.error:rejection.data)+"]";$log.error(message),NotifyService.danger(message)})}AppCtrl.$inject=["$log","$rootScope","NotifyService"],angular.module("app.controllers").controller("AppCtrl",AppCtrl)}(),function(){angular.module("app.interceptors").factory("loggingInterceptor",["$q","$log",function($q,$log){function isPartial(url){return-1===url.indexOf("partials")}return{request:function(config){return isPartial(config.url)&&$log.debug("Http Request ["+config.method+"]["+config.url+"]"),config},requestError:function(config){return $log.error("Http Request Error ["+config.method+"]["+config.url+"]"),config},response:function(response){return isPartial(response.config.url)&&$log.debug("Http Response Success: Status ["+response.status+"] to ["+response.config.method+"]["+response.config.url+"]"),response},responseError:function(rejection){return $log.error("Http Response Error: Status ["+rejection.status+"] to ["+rejection.config.method+"]["+rejection.config.url+"] data ["+(rejection.data.error?rejection.data.error:rejection.data)+"]"),$q.reject(rejection)}}}]),angular.module("app.interceptors").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push("loggingInterceptor")}])}(),function(){var UserModel=function(){return{user:null}};angular.module("app.models").factory("UserModel",UserModel)}(),function(){var NotifyService=["notify",function(notify){this.danger=function(message){notify({message:message,classes:"alert-danger"})},this.warning=function(message){notify({message:message,classes:"alert-warning"})},this.success=function(message){notify({message:message,classes:"alert-success"})},this.info=function(message){notify({message:message,classes:"alert-info"})}}];NotifyService.$inject=["notify"],angular.module("app.notify").service("NotifyService",NotifyService)}(),function(){var DateService=function(){this.now=function(){return new Date},this.getTime=function(){return this.now().getTime()}};angular.module("app.services").service("DateService",DateService)}(),function(){function HomeCtrl($log,NotifyService,Firebase,$firebase){var vm=this,ref=new Firebase("https://bug-free-food.firebaseio.com/"),sync=$firebase(ref);vm.data=sync.$asObject()}HomeCtrl.$inject=["$log","NotifyService","Firebase","$firebase"],angular.module("app.controllers.home").controller("HomeCtrl",HomeCtrl)}(),function(){function CreateMenuCtrl($log,NotifyService,Firebase,$firebase){var vm=this,restaurantsRef=new Firebase("https://bug-free-food.firebaseio.com/restaurants"),restaurantsSync=$firebase(restaurantsRef);vm.restaurants=restaurantsSync.$asArray(),console.log(vm.restaurants);var menuRef=new Firebase("https://bug-free-food.firebaseio.com/menus"),menuSync=$firebase(menuRef);vm.menus=menuSync.$asArray(),console.log(vm.menus),vm.selectedRestaurant={},vm.newMenu={name:"",foods:[{name:"",price:0}],createdDate:Date.now()},this.createMenu=function(){console.log("Adding new menu [%s]",angular.toJson(vm.newMenu)),console.log(vm.selectedRestaurant),vm.selectedRestaurant.menus||(vm.selectedRestaurant.menus=[]),vm.selectedRestaurant.menus.push(vm.newMenu),vm.restaurants.$save(vm.selectedRestaurant),console.log(vm.restaurants),vm.newMenu={name:"",foods:[{name:"",price:0}],createdDate:Date.now()}},this.removeFood=function(food,index){vm.newMenu.foods.splice(index,1)},this.addFood=function(){vm.newMenu.foods.push({name:"",price:0})}}CreateMenuCtrl.$inject=["$log","NotifyService","Firebase","$firebase"],angular.module("app.controllers.menus").controller("CreateMenuCtrl",CreateMenuCtrl)}(),function(){function ListMenusCtrl($log,NotifyService,Firebase,$firebase){var vm=this,ref=new Firebase("https://bug-free-food.firebaseio.com/restaurants"),sync=$firebase(ref);vm.restaurants=sync.$asArray(),console.log(vm.restaurants),this.removeMenuAtIndex=function(resturant,index){resturant.menus.splice(index,1),vm.restaurants.$save(resturant)}}ListMenusCtrl.$inject=["$log","NotifyService","Firebase","$firebase"],angular.module("app.controllers.menus").controller("ListMenusCtrl",ListMenusCtrl)}(),function(){function TopNavCtrl($log,NotifyService,$firebaseSimpleLogin,Firebase,UserModel){function handleSuccessfulLogin(user){user&&(UserModel.user=user,$log.debug("User ID: "+user.uid+", Provider: "+user.provider),NotifyService.success("User ID: "+user.uid+", Provider: "+user.provider))}function popError(error){$log.error(error),NotifyService.danger(error)}var vm=this,ref=new Firebase("https://bug-free-food.firebaseio.com");vm.userModel=UserModel;var authClient=$firebaseSimpleLogin(ref);console.log(authClient),this.init=function(){authClient.$getCurrentUser().then(handleSuccessfulLogin)},this.login=function(){$log.debug("Login - github"),authClient.$login("github",{rememberMe:!0,scope:"user"}).then(handleSuccessfulLogin,popError)},this.logout=function(){$log.debug("Logout"),console.log(authClient),authClient.$logout(),UserModel.user=null,NotifyService.success("user is logged out")}}TopNavCtrl.$inject=["$log","NotifyService","$firebaseSimpleLogin","Firebase","UserModel"],angular.module("app.controllers.navigation").controller("TopNavCtrl",TopNavCtrl)}(),function(){function OrdersCtrl($log,NotifyService,Firebase,$firebase,UserModel){function resetForm(){vm.newOrder={createdBy:UserModel.user,name:"",restaurant:"",content:[{}],createdDate:Date.now()}}var vm=this,ref=new Firebase("https://bug-free-food.firebaseio.com/orders"),sync=$firebase(ref);vm.userModel=UserModel,vm.orders=sync.$asArray(),resetForm(),vm.availableUsers=["James Morgan","Andy Gray","Simon Souter","Alex Lashford"],vm.availableRestaurants=[{name:"Abduls Levenshulme",openingTimes:"...",foods:[{name:"Small Chicken Naan",price:380},{name:"Small Chicken Chapatti",price:300},{name:"Chicken Lamb Mix Naan",price:600},{name:"Chicken Lamb Mix Chapatti",price:600},{name:"Large Chicken Naan",price:600},{name:"Large Chicken Chapatti",price:600},{name:"Large Lamb Naan",price:600},{name:"Large Lamb Chapatti",price:600},{name:"Chicken Seekh Mix Naan",price:600},{name:"Small Seekh Naan",price:290},{name:"Small Seekh Chapatti",price:290},{name:"Large Seekh Naan",price:370},{name:"Large Seekh Chapatti",price:370},{name:"Small Chips",price:130},{name:"Large Chips",price:200},{name:"Chicken Donner",price:350}]}],this.createOrder=function(){vm.newOrder.createdBy=UserModel.user,vm.orders.$add(angular.copy(vm.newOrder)).then(function(){NotifyService.success("Successfully added order")},function(){NotifyService.danger("Unable to save order")}),resetForm()},this.removeOrder=function(order){vm.orders.$remove(order).then(function(){NotifyService.success("Successfully removed order")},function(){NotifyService.danger("Unable to remove order")})}}OrdersCtrl.$inject=["$log","NotifyService","Firebase","$firebase","UserModel"],angular.module("app.controllers.orders").controller("OrdersCtrl",OrdersCtrl)}(),function(){function CreateRestaurantCtrl($log,NotifyService,Firebase,$firebase){var vm=this,ref=new Firebase("https://bug-free-food.firebaseio.com/restaurants"),sync=$firebase(ref);vm.resturants=sync.$asArray(),console.log(vm.resturants),vm.newRestaurant={name:"",createdDate:Date.now(),menus:[]},this.addRestaurant=function(){$log.debug("Adding new restaurants [%s]",vm.newRestaurant),vm.resturants.$add(angular.copy(vm.newRestaurant)),vm.newRestaurant={name:"",createdDate:Date.now(),menus:[]}}}CreateRestaurantCtrl.$inject=["$log","NotifyService","Firebase","$firebase"],angular.module("app.controllers.restaurant").controller("CreateRestaurantCtrl",CreateRestaurantCtrl)}(),function(){function ListRestaurantCtrl($log,NotifyService,Firebase,$firebase){var vm=this,ref=new Firebase("https://bug-free-food.firebaseio.com/restaurants"),sync=$firebase(ref);vm.restaurants=sync.$asArray()}ListRestaurantCtrl.$inject=["$log","NotifyService","Firebase","$firebase"],angular.module("app.controllers.restaurant").controller("ListRestaurantCtrl",ListRestaurantCtrl)}(),function(){function WizardCtrl($log,NotifyService,Firebase,$firebase,UserModel){var self=this,vm=this;vm.userModel=UserModel;var ref=new Firebase("https://bug-free-food.firebaseio.com/orders"),sync=$firebase(ref);vm.orders=sync.$asArray(),vm.availableUsers=["James Morgan","Andy Gray","Simon Souter","Alex Lashford"],vm.selectedOrder=void 0,vm.newOrderItemForm=void 0,vm.totalCounts={},vm.myOrder={foods:[]},this.initOrderForUser=function(){vm.selectedOrder.details||(vm.selectedOrder.details=[{user:UserModel.user,order:[]}])},this.userHasOrder=function(){return vm.selectedOrder&&vm.selectedOrder.details&&UserModel.user?vm.selectedOrder.details.some(function(detail){return detail.user.id===UserModel.user.id}):!1},this.findUserOrder=function(){for(var index in vm.selectedOrder.details)if(vm.selectedOrder.details[index].user.id===UserModel.user.id)return vm.selectedOrder.details[index];throw Error("User not found in order")},this.addFoodItem=function(){var userOrder=this.findUserOrder();userOrder.order||(userOrder.order=[]),userOrder.order.push(vm.newOrderItemForm),vm.orders.$save(vm.selectedOrder).then(function(){NotifyService.success("Added "+userOrder.order[userOrder.order.length-1].name),vm.newOrderItemForm=void 0,self.updatePageTotals()})},this.removeFoodItem=function(index){this.findUserOrder().order.splice(index,1),vm.orders.$save(vm.selectedOrder).then(function(){NotifyService.success("Item removed"),self.updatePageTotals()})},this.getOrderTotals=function(){if(!vm.selectedOrder.details||vm.selectedOrder.details.length<=0)return 0;var total=0;return vm.selectedOrder.details.forEach(function(detail){detail.order&&detail.order.forEach(function(order){total+=order.price})}),(total/100).toFixed(2)},this.updatePageTotals=function(){!vm.selectedOrder.details||vm.selectedOrder.details.length<=0||(vm.totalCounts={},vm.selectedOrder.details.forEach(function(detail){detail.order&&detail.order.forEach(function(order){vm.totalCounts[order.name]?vm.totalCounts[order.name].count++:vm.totalCounts[order.name]={name:order.name,price:order.price,count:1}})}))}}WizardCtrl.$inject=["$log","NotifyService","Firebase","$firebase","UserModel"],angular.module("app.controllers.wizard").controller("WizardCtrl",WizardCtrl)}();
//# sourceMappingURL=data:application/json;base64,