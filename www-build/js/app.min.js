'use strict';

(function () {

    var requires = [
        // 3rd Party
        'ngRoute',
        'firebase',
        // 3rd party wrappers
        'app.libs.firebase.utils',
        // Internals
        'app.controllers',
        'app.services',
        'app.filters',
        'app.directives',
        'app.models',
        'app.routes',
        'app.interceptors',
        'app.notify'
    ];

    angular.module('app', requires);

})();
'use strict';

(function () {

    angular.module('app.controllers', [
        'app.controllers.home',
        'app.controllers.menus',
        'app.controllers.orders',
        'app.controllers.restaurant',
        'app.controllers.order-wizard',
        'app.controllers.navigation'
    ]);

})();
'use strict';

(function () {

    angular.module('app.directives', []);

})();
'use strict';

(function () {

    angular.module('app.filters', []);

})();
'use strict';

(function () {
    angular.module('app.libs.firebase.utils', []);
})();
'use strict';

(function () {

    angular.module('app.interceptors', []);

})();
'use strict';

(function () {
    angular.module('app.models', []);

})();
'use strict';

(function () {

    angular.module('app.notify', ['cgNotify']);

    angular.module('app.notify').run(["notify", function (notify) {
        notify.config({
            duration: 2000,
            templateUrl: '/www-build/views/templates/angular-notify.html'
        });
    }]);

})();
'use strict';

(function () {
    angular.module('app.services', []);
})();
'use strict';

(function () {

    angular.module('app.controllers.home', []);

})();
'use strict';

(function () {

    angular.module('app.controllers.menus', []);

})();
'use strict';

(function () {

    angular.module('app.controllers.navigation', []);

})();
'use strict';

(function () {

    angular.module('app.controllers.orders', []);

})();
'use strict';

(function () {

    angular.module('app.controllers.restaurant', []);

})();
'use strict';

(function () {

    angular.module('app.controllers.order-wizard', []);

})();
'use strict';

(function () {

    /**
     * Basic app version constant
     */
    angular
        .module('app')

        // App version
        .constant('version', '0.0.1')

        // your Firebase data URL goes here, no trailing slash
        .constant('FBURL', 'https://bug-free-food.firebaseio.com');

})();
'use strict';
(function () {

    /**
     * @ngInject
     */
    var Routes = ["$routeProvider", "$locationProvider", function ($routeProvider, $locationProvider) {

        $routeProvider.when('/', {
            templateUrl: '/www-build/views/partials/home/index.html',
            controller: 'HomeCtrl as hc'
        });

        /**
         * Orders Management
         */
        $routeProvider.when('/orders/list', {
            templateUrl: '/www-build/views/partials/orders/orders.html',
            controller: 'OrdersCtrl as vm'
        });

        /**
         * Order Wizard
         */
        $routeProvider.when('/order-wizard/my-order', {
            templateUrl: '/www-build/views/partials/order-wizard/my-order.html',
            controller: 'WizardCtrl as vm'
        });
        $routeProvider.when('/order-wizard/place-order', {
            templateUrl: '/www-build/views/partials/order-wizard/place-order.html',
            controller: 'WizardCtrl as vm'
        });

        /**
         * Menus Management
         */
//        $routeProvider.when('/menus/list', {
//            templateUrl: '/www-build/views/partials/menus/menus.html',
//            controller: 'ListMenusCtrl as lmc'
//        });
//        $routeProvider.when('/menus/create', {
//            templateUrl: '/www-build/views/partials/menus/create.html',
//            controller: 'CreateMenuCtrl as cmc'
//        });

        /**
         * Restaurant Management
         */
//        $routeProvider.when('/restaurants/list', {
//            templateUrl: '/www-build/views/partials/restaurant/restaurant.html',
//            controller: 'ListRestaurantCtrl as lrc'
//        });
//        $routeProvider.when('/restaurants/create', {
//            templateUrl: '/www-build/views/partials/restaurant/create.html',
//            controller: 'CreateRestaurantCtrl as crc'
//        });

        /**
         * Fallback
         */
        $routeProvider.otherwise({
            redirectTo: '/'
        });

        // Disable html 5 mode due to IE9 compatibility requirement!
        $locationProvider.html5Mode(false);

    }];
    Routes.$inject = ["$routeProvider", "$locationProvider"];

    angular
        .module('app.routes', [])
        .config(Routes);


})();
'use strict';

(function () {

    /**
     * @ngInject
     */
    function AppCtrl($log, $rootScope, NotifyService) {

        // ViewModel
        var vm = this;

        $rootScope.$on("$routeChangeError", function (event, current, previous, rejection) {
            var message = 'Failed to change route [' + (rejection.data.error ? rejection.data.error : rejection.data) + ']';
            $log.error(message);
            NotifyService.danger(message);
        });

    }
    AppCtrl.$inject = ["$log", "$rootScope", "NotifyService"];

    angular
        .module('app.controllers')
        .controller('AppCtrl', AppCtrl);

})();

// a simple wrapper on Firebase and AngularFire to simplify deps and keep things DRY
angular.module('app.libs.firebase.utils', ['firebase'])
   .factory('fbutil', ['$window', 'FBURL', '$firebase', function($window, FBURL, $firebase) {
      "use strict";

      return {
        syncObject: function(path, factoryConfig) {
          return syncData.apply(null, arguments).$asObject();
        },

        syncArray: function(path, factoryConfig) {
          return syncData.apply(null, arguments).$asArray();
        },

        ref: firebaseRef
      };

      function pathRef(args) {
        for (var i = 0; i < args.length; i++) {
          if (angular.isArray(args[i])) {
            args[i] = pathRef(args[i]);
          }
          else if( typeof args[i] !== 'string' ) {
            throw new Error('Argument '+i+' to firebaseRef is not a string: '+args[i]);
          }
        }
        return args.join('/');
      }

      /**
       * Example:
       * <code>
       *    function(firebaseRef) {
         *       var ref = firebaseRef('path/to/data');
         *    }
       * </code>
       *
       * @function
       * @name firebaseRef
       * @param {String|Array...} path relative path to the root folder in Firebase instance
       * @return a Firebase instance
       */
      function firebaseRef(path) {
        var ref = new $window.Firebase(FBURL);
        var args = Array.prototype.slice.call(arguments);
        if( args.length ) {
          ref = ref.child(pathRef(args));
        }
        return ref;
      }

      /**
       * Create a $firebase reference with just a relative path. For example:
       *
       * <code>
       * function(syncData) {
         *    // a regular $firebase ref
         *    $scope.widget = syncData('widgets/alpha');
         *
         *    // or automatic 3-way binding
         *    syncData('widgets/alpha').$bind($scope, 'widget');
         * }
       * </code>
       *
       * Props is the second param passed into $firebase. It can also contain limit, startAt, endAt,
       * and they will be applied to the ref before passing into $firebase
       *
       * @function
       * @name syncData
       * @param {String|Array...} path relative path to the root folder in Firebase instance
       * @param {object} [props]
       * @return a Firebase instance
       */
      function syncData(path, props) {
        var ref = firebaseRef(path);
        props = angular.extend({}, props);
        angular.forEach(['limit', 'startAt', 'endAt'], function(k) {
          if( props.hasOwnProperty(k) ) {
            var v = props[k];
            ref = ref[k].apply(ref, angular.isArray(v)? v : [v]);
            delete props[k];
          }
        });
        return $firebase(ref, props);
      }
   }]);


'use strict';

(function () {

    /**
     * @ngInject
     */
    angular.module('app.interceptors').factory('loggingInterceptor', ["$q", "$log", function ($q, $log) {

        function isPartial(url) {
            return url.indexOf('partials') === -1;
        }

        return {
            'request': function (config) {
                if (isPartial(config.url)) {
                    $log.debug('Http Request [' + config.method + '][' + config.url + ']');
                }
                return config;
            },

            'requestError': function (config) {
                $log.error('Http Request Error [' + config.method + '][' + config.url + ']');
                return config;
            },

            'response': function (response) {
                if (isPartial(response.config.url)) {
                    $log.debug('Http Response Success: Status [' + response.status + '] to [' + response.config.method + '][' + response.config.url + ']');
                }
                return response;
            },

            'responseError': function (rejection) {
                $log.error('Http Response Error: Status [' + rejection.status + '] to [' + rejection.config.method + '][' + rejection.config.url + '] data [' + (rejection.data.error ? rejection.data.error : rejection.data) + ']');
                return $q.reject(rejection);
            }
        };
    }]);

    angular.module('app.interceptors').config(['$httpProvider', function ($httpProvider) {
        $httpProvider.interceptors.push('loggingInterceptor');
    }]);

})();
'use strict';

(function () {
    /**
     * @ngInject
     */
    var UserModel = function () {

        return {
            /**
             * The user
             */
            user: null
        };
    };

    angular.module('app.models').factory('UserModel', UserModel);
})();
'use strict';

(function () {

    /**
     * @ngInject
     */
    var NotifyService = ["notify", function (notify) {

        /**
         * Show a notification with style DANGER
         *
         * @param message the message to display
         */
        this.danger = function (message) {
            notify({message: message, classes: 'alert-danger'});
        };

        /**
         * Show a notification with style WARNING
         *
         * @param message the message to display
         */
        this.warning = function (message) {
            notify({message: message, classes: 'alert-warning'});
        };

        /**
         * Show a notification with style SUCCESS
         *
         * @param message the message to display
         */
        this.success = function (message) {
            notify({message: message, classes: 'alert-success'});
        };

        /**
         * Show a notification with style INFO
         *
         * @param message the message to display
         */
        this.info = function (message) {
            notify({message: message, classes: 'alert-info'});
        };
    }];
    NotifyService.$inject = ["notify"];

    angular
        .module('app.notify')
        .service('NotifyService', NotifyService);

})();
'use strict';

(function () {

    /**
     * @ngInject
     */
    var DateService = function () {

        /**
         * The Date NOW
         *
         * @returns Date
         */
        this.now = function () {
            return new Date();
        };

        /**
         * The Date NOW in seconds
         *
         * @returns number
         */
        this.getTime = function () {
            return this.now().getTime();
        };
    };

    angular
        .module('app.services')
        .service('DateService', DateService);

})();
'use strict';

(function () {

    /**
     * @ngInject
     */
    function HomeCtrl($log, NotifyService, Firebase, $firebase) {

        // ViewModel
        var vm = this;

        var ref = new Firebase("https://bug-free-food.firebaseio.com/");
        // create an AngularFire reference to the data
        var sync = $firebase(ref);
        // download the data into a local object
        vm.data = sync.$asObject();

    }
    HomeCtrl.$inject = ["$log", "NotifyService", "Firebase", "$firebase"];

    angular
        .module('app.controllers.home')
        .controller('HomeCtrl', HomeCtrl);

})();
'use strict';

(function () {

    /**
     * @ngInject
     */
    function CreateMenuCtrl($log, NotifyService, Firebase, $firebase) {

        // ViewModel
        var vm = this;

        // restaurantsRef
        var restaurantsRef = new Firebase("https://bug-free-food.firebaseio.com/restaurants");
        var restaurantsSync = $firebase(restaurantsRef);

        vm.restaurants = restaurantsSync.$asArray();
        console.log(vm.restaurants);

        // menuRef
        var menuRef = new Firebase("https://bug-free-food.firebaseio.com/menus");
        var menuSync = $firebase(menuRef);

        vm.menus = menuSync.$asArray();
        console.log(vm.menus);

        vm.selectedRestaurant = {};
        vm.newMenu = {
            name: '',
            foods: [
                {
                    name: '', price: 0
                }
            ],
            createdDate: Date.now()
        };

        this.createMenu = function () {
            console.log('Adding new menu [%s]', angular.toJson(vm.newMenu));
            console.log(vm.selectedRestaurant);

            if (!vm.selectedRestaurant.menus) {
                vm.selectedRestaurant.menus = [];
            }
            vm.selectedRestaurant.menus.push(vm.newMenu);

            vm.restaurants.$save(vm.selectedRestaurant);
            console.log(vm.restaurants);

            vm.newMenu = {
                name: '',
                foods: [
                    {
                        name: '', price: 0
                    }
                ],
                createdDate: Date.now()
            };
        };

        this.removeFood = function (food, index) {
            vm.newMenu.foods.splice(index, 1);
        };

        this.addFood = function () {
            vm.newMenu.foods.push({
                name: '', price: 0
            });
        };

//        Small Chicken Naan	£3.80
//        Small Chicken Chapatti	£3.80
//        Chicken Lamb Mix Naan	£6.00
//        Chicken Lamb Mix Chapatti	£6.00
//        Large Chicken Naan	£6.00
//        Large Chicken Chapatti	£6.00
//        Large Lamb Naan	£6.00
//        Large Lamb Chapatti	£6.00
//        Chicken Seekh Mix Naan	£6.00
//        Chicken Seekh Mix Chapatti	£6.00
//        Small Seekh Naan	£2.90
//        Small Seekh Chapatti	£2.90
//        Large Seekh Naan	£3.70
//        Large Seekh Chapatti	£3.70
//        Small Chips	£1.30
//        Large Chips	£2.00
//        Chicken Donner	£3.50


    }
    CreateMenuCtrl.$inject = ["$log", "NotifyService", "Firebase", "$firebase"];

    angular
        .module('app.controllers.menus')
        .controller('CreateMenuCtrl', CreateMenuCtrl);

})();
'use strict';

(function () {

    /**
     * @ngInject
     */
    function ListMenusCtrl($log, NotifyService, Firebase, $firebase) {

        // ViewModel
        var vm = this;

        var ref = new Firebase("https://bug-free-food.firebaseio.com/restaurants");
        var sync = $firebase(ref);

        vm.restaurants = sync.$asArray();

        console.log(vm.restaurants);

        this.removeMenuAtIndex = function (resturant, index) {
            resturant.menus.splice(index, 1);
            vm.restaurants.$save(resturant);
        };
    }
    ListMenusCtrl.$inject = ["$log", "NotifyService", "Firebase", "$firebase"];

    angular
        .module('app.controllers.menus')
        .controller('ListMenusCtrl', ListMenusCtrl);

})();
'use strict';

(function () {

    /**
     * @ngInject
     */
    function TopNavCtrl($log, NotifyService, $firebaseSimpleLogin, Firebase, UserModel) {

        // ViewModel
        var vm = this;

        var ref = new Firebase("https://bug-free-food.firebaseio.com");

        vm.userModel = UserModel;

        var authClient = $firebaseSimpleLogin(ref);
        console.log(authClient);

        // TODO move to resolve!
        this.init = function () {
            authClient.$getCurrentUser().then(handleSuccessfulLogin);
        };

        this.login = function () {
            $log.debug('Login - github');
            authClient.$login('github', { rememberMe: true, scope: 'user'})
                .then(handleSuccessfulLogin, popError);
        };

        this.logout = function () {
            $log.debug('Logout');
            console.log(authClient);
            authClient.$logout();
            UserModel.user = null;
            NotifyService.success('user is logged out');
        };

        function handleSuccessfulLogin(user) {
            if (user) {
                UserModel.user = user;
                $log.debug("User ID: " + user.uid + ", Provider: " + user.provider);
                NotifyService.success("User ID: " + user.uid + ", Provider: " + user.provider);
            }
        }

        function popError(error) {
            $log.error(error);
            NotifyService.danger(error);
        }
    }
    TopNavCtrl.$inject = ["$log", "NotifyService", "$firebaseSimpleLogin", "Firebase", "UserModel"];

    angular
        .module('app.controllers.navigation')
        .controller('TopNavCtrl', TopNavCtrl);

})();
'use strict';

(function () {

    /**
     * @ngInject
     */
    function OrdersCtrl($log, fbutil, NotifyService, UserModel) {

        // ViewModel
        var vm = this;

        vm.orders = fbutil.syncArray('orders');

        vm.userModel = UserModel;

        resetForm();

        // Users
        vm.availableUsers = ['James Morgan', 'Andy Gray', 'Simon Souter', 'Alex Lashford'];

        // Available page configuration
        vm.availableRestaurants = [
            {
                name: 'Abduls Levenshulme',
                openingTimes: '...',
                foods: [
                    {name: 'Small Chicken Naan', price: 380},
                    {name: 'Small Chicken Chapatti', price: 300},
                    {name: 'Chicken Lamb Mix Naan', price: 600},
                    {name: 'Chicken Lamb Mix Chapatti', price: 600},
                    {name: 'Large Chicken Naan', price: 600},
                    {name: 'Large Chicken Chapatti', price: 600},
                    {name: 'Large Lamb Naan', price: 600},
                    {name: 'Large Lamb Chapatti', price: 600},
                    {name: 'Chicken Seekh Mix Naan', price: 600},
                    {name: 'Small Seekh Naan', price: 290},
                    {name: 'Small Seekh Chapatti', price: 290},
                    {name: 'Large Seekh Naan', price: 370},
                    {name: 'Large Seekh Chapatti', price: 370},
                    {name: 'Small Chips', price: 130},
                    {name: 'Large Chips', price: 200},
                    {name: 'Chicken Donner', price: 350}
                ]
            }
        ];

        this.createOrder = function () {

            // Set the user
            vm.newOrder.createdBy = UserModel.user;

            vm.orders.$add(angular.copy(vm.newOrder))
                .then(function () {
                    NotifyService.success('Successfully added order');
                }, function () {
                    NotifyService.danger('Unable to save order');
                });
            resetForm();
        };

        this.removeOrder = function (order) {
            vm.orders.$remove(order)
                .then(function () {
                    NotifyService.success('Successfully removed order');
                }, function () {
                    NotifyService.danger('Unable to remove order');
                });
        };

        function resetForm() {
            vm.newOrder = {
                createdBy: UserModel.user,
                name: '',
                restaurant: '',
                content: [
                    {}
                ],
                createdDate: Date.now()
            };
        }
    }
    OrdersCtrl.$inject = ["$log", "fbutil", "NotifyService", "UserModel"];

    angular
        .module('app.controllers.orders')
        .controller('OrdersCtrl', OrdersCtrl);

})();
'use strict';

(function () {

    /**
     * @ngInject
     */
    function CreateRestaurantCtrl($log, NotifyService, Firebase, $firebase) {

        // ViewModel
        var vm = this;

        var ref = new Firebase("https://bug-free-food.firebaseio.com/restaurants");
        var sync = $firebase(ref);

        vm.resturants = sync.$asArray();
        console.log(vm.resturants);

        vm.newRestaurant = {
            name: '',
            createdDate: Date.now(),
            menus: []
        };

        this.addRestaurant = function () {
            $log.debug('Adding new restaurants [%s]', vm.newRestaurant);

            vm.resturants.$add(angular.copy(vm.newRestaurant));

            vm.newRestaurant = {
                name: '',
                createdDate: Date.now(),
                menus: []
            };
        };
    }
    CreateRestaurantCtrl.$inject = ["$log", "NotifyService", "Firebase", "$firebase"];

    angular
        .module('app.controllers.restaurant')
        .controller('CreateRestaurantCtrl', CreateRestaurantCtrl);

})();
'use strict';

(function () {

    /**
     * @ngInject
     */
    function ListRestaurantCtrl($log, NotifyService, Firebase, $firebase) {

        // ViewModel
        var vm = this;

        var ref = new Firebase("https://bug-free-food.firebaseio.com/restaurants");
        var sync = $firebase(ref);

        vm.restaurants = sync.$asArray();

    }
    ListRestaurantCtrl.$inject = ["$log", "NotifyService", "Firebase", "$firebase"];

    angular
        .module('app.controllers.restaurant')
        .controller('ListRestaurantCtrl', ListRestaurantCtrl);

})();
'use strict';

(function () {

    /**
     * @ngInject
     */
    function WizardCtrl($log, NotifyService, fbutil, UserModel) {

        var self = this;

        // ViewModel
        var vm = this;

        vm.userModel = UserModel;

        vm.orders = fbutil.syncArray('orders');

        vm.selectedOrder = undefined;

        vm.newOrderItemForm = undefined;

        vm.totalCounts = {};

        // The data form
        vm.myOrder = {
            foods: []
        };

        this.initOrderForUser = function () {
            var orderDetail = {
                user: UserModel.user,
                order: []
            };

            if (hasOrderWithDetails()) {
                vm.selectedOrder.details.push(orderDetail);
            } else {
                vm.selectedOrder.details = [orderDetail]
            }
        };

        this.userHasOrder = function () {
            if (!hasOrderWithDetails() || !UserModel.user) {
                return false;
            }

            return vm.selectedOrder.details.some(function (detail) {
                return detail.user.id === UserModel.user.id
            })
        };

        this.findUserOrder = function () {
            var userDetails = vm.selectedOrder.details.filter(function (detail) {
                return detail.user.id === UserModel.user.id
            });

            if (userDetails.length === 0) {
                throw new Error('User not found in order!');
            }
            return userDetails[0];
        };

        this.addFoodItem = function () {
            var userOrder = this.findUserOrder();

            if (!userOrder.order) {
                userOrder.order = [];
            }
            userOrder.order.push(vm.newOrderItemForm);
            vm.orders.$save(vm.selectedOrder)
                .then(function () {
                    NotifyService.success('Added ' + userOrder.order[userOrder.order.length - 1].name + ' to the order!');
                    vm.newOrderItemForm = undefined;
                    self.updatePageTotals();
                });
        };

        this.removeFoodItem = function (index, item) {
            this.findUserOrder().order.splice(index, 1);
            vm.orders.$save(vm.selectedOrder)
                .then(function () {
                    NotifyService.success('Removed ' + item.name + ' from the order!');
                    self.updatePageTotals();
                });
        };

        this.getUsersOrder = function () {
            if (!hasOrderWithDetails() || vm.selectedOrder.details.length <= 0) {
                return 0;
            }
            var total = 0;
            (vm.findUserOrder().order || []).forEach(function (item) {
                total += item.price;
            });
            return (total / 100).toFixed(2);
        };

        this.getOrderTotals = function () {
            if (!hasOrderWithDetails() || vm.selectedOrder.details.length <= 0) {
                return 0;
            }
            var total = 0;
            vm.selectedOrder.details.forEach(function (detail) {
                if (detail.order) {
                    detail.order.forEach(function (order) {
                        total += order.price;
                    });
                }
            });
            return (total / 100).toFixed(2);
        };

        this.updatePageTotals = function () {
            if (!hasOrderWithDetails() || vm.selectedOrder.details.length <= 0) {
                return;
            }

            vm.totalCounts = {};
            vm.selectedOrder.details.forEach(function (detail) {
                if (detail.order) {
                    detail.order.forEach(function (order) {
                        if (!vm.totalCounts[order.name]) {
                            vm.totalCounts[order.name] = {
                                name: order.name,
                                price: order.price,
                                count: 1
                            };
                        } else {
                            vm.totalCounts[order.name].count++;
                        }
                    });
                }
            });
        };

        function hasOrderWithDetails() {
            return vm.selectedOrder && vm.selectedOrder.details;
        }

    }
    WizardCtrl.$inject = ["$log", "NotifyService", "fbutil", "UserModel"];

    angular
        .module('app.controllers.order-wizard')
        .controller('WizardCtrl', WizardCtrl);

})();
//# sourceMappingURL=data:application/json;base64,